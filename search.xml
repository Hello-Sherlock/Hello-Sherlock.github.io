<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[浅谈Mach IPC]]></title>
      <url>http://Hello-Sherlock.github.io/2017/02/12/seven-BLOG/</url>
      <content type="html"><![CDATA[<blockquote>
<p>原语是由若干个 机器指令 构成的完成某种特定功能的一段程序，具有不可分割性，即原语的执行必须是连续的，在执行过程中不允许被中断</p>
</blockquote>
<p>在谈mach ipc之前我们先来讨论讨论mach的一些设计风格以及ipc的一些基础概念</p>
<a id="more"></a>
<p>首先mach作为一个极简的内核，其主要功能就是要把所有的功能都移除内核，放在用户态中，这样mach就可以保持着极简的风格。mach设计最大的优点是没有在设计中像其他内核一样考虑多处理，内核中的大部分功能都是分离的组件通过消息的传递来执行，这样不同的组件就可以不用再同一个处理器上执行。</p>
<h2 id="消息"><a href="#消息" class="headerlink" title="消息"></a>消息</h2><blockquote>
<p>在mach中，所有的东西都是通过自己的对象来实现的，进程称为任务，线程和虚拟内存都可以称为对象，所有对象都有自己的属性</p>
</blockquote>
<p>说到消息，其实mach中最基本的概念就是消息，它是mach ipc的核心构建模块，是在两个端口之间传递的</p>
<p>像在其他架构中，对象和对象之前的通信都是要有一个接口，而mach是通过消息传递的方式来实现对象间的通信，这就是mach特殊的地方。</p>
<p>mach消息有简单与复杂之分，其实说白了就是不同字段的消息结构，复杂消息主要是通过消息头标志位的<code>MACH_MSGH_BITS_COMPLES</code>来确定的<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>												</div><div class="line">&#123;</div><div class="line">  <span class="keyword">void</span>*				address;                          </div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> !defined(__LP64__)</span></div><div class="line">  <span class="keyword">mach_msg_size_t</span>       	size;			</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">  <span class="keyword">boolean_t</span>     		deallocate: <span class="number">8</span>;			</div><div class="line">  <span class="keyword">mach_msg_copy_options_t</span>       copy: <span class="number">8</span>;		</div><div class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span>     		pad1: <span class="number">8</span>;</div><div class="line">  <span class="keyword">mach_msg_descriptor_type_t</span>    type: <span class="number">8</span>;			</div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(__LP64__)</span></div><div class="line">  <span class="keyword">mach_msg_size_t</span>       	size;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(KERNEL) &amp;&amp; !defined(__LP64__)</span></div><div class="line">  <span class="keyword">uint32_t</span>          pad_end;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">&#125; <span class="keyword">mach_msg_ool_descriptor_t</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></div><div class="line">&#123;</div><div class="line">  <span class="keyword">uint32_t</span>			address;</div><div class="line">  <span class="keyword">mach_msg_size_t</span>		count;</div><div class="line">  <span class="keyword">boolean_t</span>     		deallocate: <span class="number">8</span>;</div><div class="line">  <span class="keyword">mach_msg_copy_options_t</span>       copy: <span class="number">8</span>;</div><div class="line">  <span class="keyword">mach_msg_type_name_t</span>		disposition : <span class="number">8</span>;</div><div class="line">  <span class="keyword">mach_msg_descriptor_type_t</span>	type : <span class="number">8</span>;</div><div class="line">&#125; <span class="keyword">mach_msg_ool_ports_descriptor32_t</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></div><div class="line">&#123;</div><div class="line">  <span class="keyword">uint64_t</span>			address;</div><div class="line">  <span class="keyword">boolean_t</span>     		deallocate: <span class="number">8</span>;</div><div class="line">  <span class="keyword">mach_msg_copy_options_t</span>       copy: <span class="number">8</span>;</div><div class="line">  <span class="keyword">mach_msg_type_name_t</span>		disposition : <span class="number">8</span>;</div><div class="line">  <span class="keyword">mach_msg_descriptor_type_t</span>	type : <span class="number">8</span>;</div><div class="line">  <span class="keyword">mach_msg_size_t</span>		count;</div><div class="line">&#125; <span class="keyword">mach_msg_ool_ports_descriptor64_t</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></div><div class="line">&#123;</div><div class="line">  <span class="keyword">void</span>*				address;</div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> !defined(__LP64__)</span></div><div class="line">  <span class="keyword">mach_msg_size_t</span>		count;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">  <span class="keyword">boolean_t</span>     		deallocate: <span class="number">8</span>;</div><div class="line">  <span class="keyword">mach_msg_copy_options_t</span>       copy: <span class="number">8</span>;</div><div class="line">  <span class="keyword">mach_msg_type_name_t</span>		disposition : <span class="number">8</span>;</div><div class="line">  <span class="keyword">mach_msg_descriptor_type_t</span>	type : <span class="number">8</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(__LP64__)</span></div><div class="line">  <span class="keyword">mach_msg_size_t</span>		count;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(KERNEL) &amp;&amp; !defined(__LP64__)</span></div><div class="line">  <span class="keyword">uint32_t</span>          pad_end;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">&#125; <span class="keyword">mach_msg_ool_ports_descriptor_t</span>;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> * LP64support - This union definition is not really</div><div class="line"> * appropriate in LP64 mode because not all descriptors</div><div class="line"> * are of the same size in that environment.</div><div class="line"> */</div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(__LP64__) &amp;&amp; defined(KERNEL)</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">union</span></div><div class="line">&#123;</div><div class="line">  <span class="keyword">mach_msg_port_descriptor_t</span>		port;</div><div class="line">  <span class="keyword">mach_msg_ool_descriptor32_t</span>		out_of_line;</div><div class="line">  <span class="keyword">mach_msg_ool_ports_descriptor32_t</span>	ool_ports;</div><div class="line">  <span class="keyword">mach_msg_type_descriptor_t</span>		type;</div><div class="line">&#125; <span class="keyword">mach_msg_descriptor_t</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">union</span></div><div class="line">&#123;</div><div class="line">  <span class="keyword">mach_msg_port_descriptor_t</span>		port;</div><div class="line">  <span class="keyword">mach_msg_ool_descriptor_t</span>		out_of_line;</div><div class="line">  <span class="keyword">mach_msg_ool_ports_descriptor_t</span>	ool_ports;</div><div class="line">  <span class="keyword">mach_msg_type_descriptor_t</span>		type;</div><div class="line">&#125; <span class="keyword">mach_msg_descriptor_t</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure></p>
<p>由以上代码可以看出，在复杂消息的描述符中出现了一些OOL(out-of-line)，他是mach消息的重要特性，允许添加各种数据的分散指针，这就相当于添加了好多通向对象的各种条件的管道，主要描述了要附加数据的地址和大小以及对数据的一些处理。</p>
<p>mach消息的发送和接收主要是通过一个共同的API函数<code>mach_msg()</code>来实现，其中包含了<code>mach_msg_send()</code>和<code>mach_msg_receive()</code>等，而<code>mach_msg()</code>则调用了一个mach陷阱(<code>mach_msg_trap</code>相当于系统调用)，当mach在用户态时可以通过引发mach陷阱来切换到内核态继续完成mach_msg的相应工作。</p>
<p>由于mach架构是一个标准的微内核架构，所以<code>mach_msg()</code>函数必须在发送者和接收者之间复制消息所在的内存，这样频繁的复制内存会带来很大的损耗，为了解决这个问题，XNU中会让让所有的内核组件共享同一个地址空间，这样消息在传递的过程中只需要传递其相应的指针就可以了。</p>
<h2 id="port"><a href="#port" class="headerlink" title="port"></a>port</h2><p>说起ipc，除了消息，那就是端口了</p>
<p>ipc设计中非常强大的一个特性就是可以通过复杂消息将端口从一个任务传递到另一个任务中，也可以将端口和权限从一个实体传到另一个实体，每一个端口都有自己的权限</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">natural_t</span> <span class="keyword">mach_port_right_t</span>;</div><div class="line"><span class="comment">//发送</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MACH_PORT_RIGHT_SEND		((mach_port_right_t) 0)</span></div><div class="line"><span class="comment">//接收</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MACH_PORT_RIGHT_RECEIVE		((mach_port_right_t) 1)</span></div><div class="line"><span class="comment">//发送一次</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MACH_PORT_RIGHT_SEND_ONCE	((mach_port_right_t) 2)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MACH_PORT_RIGHT_PORT_SET	((mach_port_right_t) 3)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MACH_PORT_RIGHT_DEAD_NAME	((mach_port_right_t) 4)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MACH_PORT_RIGHT_LABELH	        ((mach_port_right_t) 5)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MACH_PORT_RIGHT_NUMBER		((mach_port_right_t) 6)</span></div></pre></td></tr></table></figure>
<p>以上就是mach端口的一些权限，看字面意思就明白，其中重要的就是send和receive</p>
<p>在谈论了ipc的基本原语:消息、消息的发送接收、以及端口、权限等之后，我们需要进一步了解这些原语在底层的实现</p>
<p>需要提升的姿势:</p>
<ol>
<li>分析有关mach ports的cve</li>
<li>从分析入手深入ipc</li>
</ol>
<p>参考:《深入解析OSX&amp;iOS操作系统》<br><a href="https://jaq.alibaba.com/community/art/show?articleid=687" target="_blank" rel="external">黑云压城城欲摧-2016年iOS公开可以用漏洞总结</a></p>
]]></content>
      
        
        <tags>
            
            <tag> OSX </tag>
            
            <tag> Mach </tag>
            
            <tag> IPC </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mach-O加载流程]]></title>
      <url>http://Hello-Sherlock.github.io/2017/01/04/six-Blog/</url>
      <content type="html"><![CDATA[<blockquote>
<p>了解了<a href="https://hello-sherlock.github.io/2016/12/06/three-Blog/">Mach-O的文件格式</a>，肯定需要了解Mach-O的加载流程，既然要研究OSX，这就是必不可少的一步，那么通过阅读源码可以比较清晰的认识这一流程<br>用户态在加载新的可执行文件时会有一种方式是通过<code>exec*</code>系列函数，所以我们先从<code>exec*</code>说起，由于exec*是都只是对系统调用execve()库的封装，所以我们先从一张流程图来看起</p>
</blockquote>
<a id="more"></a>
<p><img src="http://oh5mz2415.bkt.clouddn.com/QQ20170304-185855@2x.jpg" alt="QQ20170304-185855@2x.jpg"></p>
<h3 id="1-1-mac-execve"><a href="#1-1-mac-execve" class="headerlink" title="1.1__mac_execve()"></a>1.1<code>__mac_execve()</code></h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span></div><div class="line">__mac_execve(proc_t p, <span class="class"><span class="keyword">struct</span> <span class="title">__mac_execve_args</span></span> *uap, int32_t *retval)</div><div class="line">&#123;</div><div class="line">	<span class="keyword">char</span> *bufp = NULL; </div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">image_params</span></span> *imgp;</div><div class="line"></div><div class="line">......</div><div class="line"></div><div class="line">	context.vc_thread = current_thread();</div><div class="line">	context.vc_ucred = kauth_cred_proc_ref(p);	<span class="comment">/* XXX must NOT be kauth_cred_get() */</span></div><div class="line"></div><div class="line">	<span class="comment">/* Allocate a big chunk for locals instead of using stack since these  </span></div><div class="line">	 * structures a pretty big.</div><div class="line">	 */</div><div class="line">	 <span class="comment">//申请一块内存用来存放imgp,vap,origavp的数据结构</span></div><div class="line">	MALLOC(bufp, <span class="keyword">char</span> *, (<span class="keyword">sizeof</span>(*imgp) + <span class="keyword">sizeof</span>(*vap) + <span class="keyword">sizeof</span>(*origvap)), M_TEMP, M_WAITOK | M_ZERO);</div><div class="line">	imgp = (<span class="class"><span class="keyword">struct</span> <span class="title">image_params</span></span> *) bufp;</div><div class="line">	<span class="keyword">if</span> (bufp == NULL) &#123;</div><div class="line">		error = ENOMEM;</div><div class="line">		goto exit_with_error;</div><div class="line">	&#125;</div><div class="line">	vap = (<span class="class"><span class="keyword">struct</span> <span class="title">vnode_attr</span></span> *) (bufp + <span class="keyword">sizeof</span>(*imgp));</div><div class="line">	origvap = (<span class="class"><span class="keyword">struct</span> <span class="title">vnode_attr</span></span> *) (bufp + <span class="keyword">sizeof</span>(*imgp) + <span class="keyword">sizeof</span>(*vap));</div><div class="line">	<span class="comment">//初始化imgp</span></div><div class="line">	<span class="comment">/* Initialize the common data in the image_params structure */</span></div><div class="line">	imgp-&gt;ip_user_fname = uap-&gt;fname;</div><div class="line">	imgp-&gt;ip_user_argv = uap-&gt;argp;</div><div class="line">	imgp-&gt;ip_user_envv = uap-&gt;envp;</div><div class="line">	imgp-&gt;ip_vattr = vap;</div><div class="line">	imgp-&gt;ip_origvattr = origvap;</div><div class="line">	imgp-&gt;ip_vfs_context = &amp;context;</div><div class="line">	imgp-&gt;ip_flags = (is_64 ? IMGPF_WAS_64BIT : IMGPF_NONE) | ((p-&gt;p_flag &amp; P_DISABLE_ASLR) ? IMGPF_DISABLE_ASLR : IMGPF_NONE);</div><div class="line">	imgp-&gt;ip_seg = (is_64 ? UIO_USERSPACE64 : UIO_USERSPACE32);</div><div class="line">	imgp-&gt;ip_mac_return = <span class="number">0</span>;</div><div class="line"></div><div class="line">	uthread = get_bsdthread_info(current_thread());</div><div class="line">	<span class="keyword">if</span> (uthread-&gt;uu_flag &amp; UT_VFORK) &#123;</div><div class="line">		imgp-&gt;ip_flags |= IMGPF_VFORK_EXEC;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">#<span class="keyword">if</span> CONFIG_MACF</div><div class="line">	<span class="keyword">if</span> (uap-&gt;mac_p != USER_ADDR_NULL) &#123;</div><div class="line">		error = mac_execve_enter(uap-&gt;mac_p, imgp);</div><div class="line">		<span class="keyword">if</span> (error) &#123;</div><div class="line">			kauth_cred_unref(&amp;context.vc_ucred);</div><div class="line">			goto exit_with_error;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">#endif</div><div class="line"><span class="comment">//执行image函数</span></div><div class="line">	error = exec_activate_image(imgp);</div><div class="line">	</div><div class="line"><span class="comment">//释放资源</span></div><div class="line">	kauth_cred_unref(&amp;context.vc_ucred);</div><div class="line"></div><div class="line">......</div><div class="line"></div><div class="line">	<span class="keyword">return</span>(error);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>主要加载镜像进行数据的初始化以及资源的相关操作，具体的家在流程在<code>exec_activate_image())</code>中</li>
</ul>
<h3 id="1-2exec-activate-image"><a href="#1-2exec-activate-image" class="headerlink" title="1.2exec_activate_image()"></a>1.2<code>exec_activate_image()</code></h3><figure class="highlight zephir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">int</span></div><div class="line">exec_activate_image(struct image_params *imgp)</div><div class="line">&#123;</div><div class="line">	struct nameidata *ndp = <span class="keyword">NULL</span>;</div><div class="line">	<span class="keyword">const</span> <span class="keyword">char</span> *excpath;</div><div class="line">	<span class="keyword">int</span> error;</div><div class="line">	<span class="keyword">int</span> resid;</div><div class="line">	<span class="keyword">int</span> once = <span class="number">1</span>;	<span class="comment">/* save SGUID-ness for interpreted files */</span></div><div class="line">	<span class="keyword">int</span> i;</div><div class="line">	<span class="keyword">int</span> itercount = <span class="number">0</span>;</div><div class="line">	proc_t p = vfs_context_proc(imgp-&gt;ip_vfs_context);</div><div class="line"></div><div class="line">	error = execargs_alloc(imgp);</div><div class="line">	<span class="keyword">if</span> (error)</div><div class="line">		<span class="keyword">goto</span> bad_notrans;</div><div class="line">	<span class="comment">//保存程序路径</span></div><div class="line">	error = exec_save_path(imgp, imgp-&gt;ip_user_fname, imgp-&gt;ip_seg, &amp;excpath);</div><div class="line">	<span class="keyword">if</span> (error) &#123;</div><div class="line">		<span class="keyword">goto</span> bad_notrans;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/* Use excpath, which contains the copyin-ed exec path */</span></div><div class="line">	DTRACE_PROC1(exec, uintptr_t, excpath);</div><div class="line"></div><div class="line">	MALLOC(ndp, struct nameidata *, sizeof(*ndp), M_TEMP, M_WAITOK | M_ZERO);</div><div class="line">	<span class="keyword">if</span> (ndp == <span class="keyword">NULL</span>) &#123;</div><div class="line">		error = ENOMEM;</div><div class="line">		<span class="keyword">goto</span> bad_notrans;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	NDINIT(ndp, LOOKUP, OP_LOOKUP, FOLLOW | LOCKLEAF | AUDITVNPATH1,</div><div class="line">		   UIO_SYSSPACE, CAST_USER_ADDR_T(excpath), imgp-&gt;ip_vfs_context);</div><div class="line"></div><div class="line">again:</div><div class="line">	error = namei(ndp);</div><div class="line">	<span class="keyword">if</span> (error)</div><div class="line">		<span class="keyword">goto</span> bad_notrans;</div><div class="line">	imgp-&gt;ip_ndp = ndp;	<span class="comment">/* successful namei(); call nameidone() later */</span></div><div class="line">	imgp-&gt;ip_vp = ndp-&gt;ni_vp;	<span class="comment">/* if set, need to vnode_put() at some point */</span></div><div class="line"></div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * Before we start the transition from binary A to binary B, make</div><div class="line">	 * sure another thread hasn't started exiting the process.  We grab</div><div class="line">	 * the proc lock to check p_lflag initially, and the transition</div><div class="line">	 * mechanism ensures that the value doesn't change after we release</div><div class="line">	 * the lock.</div><div class="line">	 */</div><div class="line">	proc_lock(p);</div><div class="line">	<span class="keyword">if</span> (p-&gt;p_lflag &amp; P_LEXIT) &#123;</div><div class="line">		error = EDEADLK;</div><div class="line">		proc_unlock(p);</div><div class="line">		<span class="keyword">goto</span> bad_notrans;</div><div class="line">	&#125;</div><div class="line">	error = proc_transstart(p, <span class="number">1</span>, <span class="number">0</span>);</div><div class="line">	proc_unlock(p);</div><div class="line">	<span class="keyword">if</span> (error)</div><div class="line">		<span class="keyword">goto</span> bad_notrans;</div><div class="line"></div><div class="line">	error = exec_check_permissions(imgp);</div><div class="line">	<span class="keyword">if</span> (error)</div><div class="line">		<span class="keyword">goto</span> bad;</div><div class="line"></div><div class="line">	<span class="comment">/* Copy; avoid invocation of an interpreter overwriting the original */</span></div><div class="line">	<span class="keyword">if</span> (once) &#123;</div><div class="line">		once = <span class="number">0</span>;</div><div class="line">		*imgp-&gt;ip_origvattr = *imgp-&gt;ip_vattr;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	error = vn_rdwr(UIO_READ, imgp-&gt;ip_vp, imgp-&gt;ip_vdata, PAGE_SIZE, <span class="number">0</span>,</div><div class="line">			UIO_SYSSPACE, IO_NODELOCKED,</div><div class="line">			vfs_context_ucred(imgp-&gt;ip_vfs_context),</div><div class="line">			&amp;resid, vfs_context_proc(imgp-&gt;ip_vfs_context));</div><div class="line">	<span class="keyword">if</span> (error)</div><div class="line">		<span class="keyword">goto</span> bad;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (resid) &#123;</div><div class="line">		memset(imgp-&gt;ip_vdata + (PAGE_SIZE - resid), <span class="number">0x0</span>, resid);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">encapsulated_binary:</div><div class="line">	<span class="comment">/* Limit the number of iterations we will attempt on each binary */</span></div><div class="line">	<span class="keyword">if</span> (++itercount &gt; EAI_ITERLIMIT) &#123;</div><div class="line">	    	error = EBADEXEC;</div><div class="line">		<span class="keyword">goto</span> bad;</div><div class="line">	&#125;</div><div class="line">	error = <span class="number">-1</span>;</div><div class="line"><span class="comment">//遍历execsw来确定不同的加载函数</span></div><div class="line">	<span class="keyword">for</span>(i = <span class="number">0</span>; error == <span class="number">-1</span> &amp;&amp; execsw[i].ex_imgact != <span class="keyword">NULL</span>; i++) &#123;</div><div class="line"></div><div class="line">		error = (*execsw[i].ex_imgact)(imgp);</div><div class="line"></div><div class="line">		<span class="keyword">switch</span> (error) &#123;</div><div class="line">		<span class="comment">/* case -1: not claimed: continue */</span></div><div class="line">		<span class="keyword">case</span> <span class="number">-2</span>:		<span class="comment">/* Encapsulated binary, imgp-&gt;ip_XXX set for next iteration */</span></div><div class="line">			<span class="keyword">goto</span> encapsulated_binary;</div><div class="line">                   		<span class="keyword">case</span> <span class="number">-3</span>:		<span class="comment">/* Interpreter */</span></div><div class="line"><span class="comment">#if CONFIG_MACF</span></div><div class="line">			<span class="comment">/*</span></div><div class="line">			 * Copy the script label for later use. Note that</div><div class="line">			 * the label can be different when the script is</div><div class="line">			 * actually read by the interpreter.</div><div class="line">			 */</div><div class="line">			<span class="keyword">if</span> (imgp-&gt;ip_scriptlabelp)</div><div class="line">				mac_vnode_label_free(imgp-&gt;ip_scriptlabelp);</div><div class="line">			imgp-&gt;ip_scriptlabelp = mac_vnode_label_alloc();</div><div class="line">			<span class="keyword">if</span> (imgp-&gt;ip_scriptlabelp == <span class="keyword">NULL</span>) &#123;</div><div class="line">				error = ENOMEM;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">			mac_vnode_label_copy(imgp-&gt;ip_vp-&gt;v_label,</div><div class="line">					     imgp-&gt;ip_scriptlabelp);</div><div class="line"></div><div class="line">			<span class="comment">/*</span></div><div class="line">			 * Take a ref of the script vnode for later use.</div><div class="line">			 */</div><div class="line">			<span class="keyword">if</span> (imgp-&gt;ip_scriptvp)</div><div class="line">				vnode_put(imgp-&gt;ip_scriptvp);</div><div class="line">			<span class="keyword">if</span> (vnode_getwithref(imgp-&gt;ip_vp) == <span class="number">0</span>)</div><div class="line">				imgp-&gt;ip_scriptvp = imgp-&gt;ip_vp;</div><div class="line"><span class="comment">#endif</span></div><div class="line"></div><div class="line">			nameidone(ndp);</div><div class="line"></div><div class="line">			vnode_put(imgp-&gt;ip_vp);</div><div class="line">			imgp-&gt;ip_vp = <span class="keyword">NULL</span>;	<span class="comment">/* already put */</span></div><div class="line">			imgp-&gt;ip_ndp = <span class="keyword">NULL</span>; <span class="comment">/* already nameidone */</span></div><div class="line"></div><div class="line">			<span class="comment">/* Use excpath, which exec_shell_imgact reset to the interpreter */</span></div><div class="line">			NDINIT(ndp, LOOKUP, OP_LOOKUP, FOLLOW | LOCKLEAF,</div><div class="line">				   UIO_SYSSPACE, CAST_USER_ADDR_T(excpath), imgp-&gt;ip_vfs_context);</div><div class="line"></div><div class="line">			proc_transend(p, <span class="number">0</span>);</div><div class="line">			<span class="keyword">goto</span> again;</div><div class="line"></div><div class="line">		<span class="keyword">default</span>:</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * Call out to allow 3rd party notification of exec. </div><div class="line">	 * Ignore result of kauth_authorize_fileop call.</div><div class="line">	 */</div><div class="line">	<span class="keyword">if</span> (error == <span class="number">0</span> &amp;&amp; kauth_authorize_fileop_has_listeners()) &#123;</div><div class="line">		kauth_authorize_fileop(vfs_context_ucred(imgp-&gt;ip_vfs_context),</div><div class="line">					KAUTH_FILEOP_EXEC,</div><div class="line">					(uintptr_t)ndp-&gt;ni_vp, <span class="number">0</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (error == <span class="number">0</span>) &#123;</div><div class="line">		<span class="comment">/*</span></div><div class="line">		 * Reset atm context from task</div><div class="line">		 */</div><div class="line">		task_atm_reset(p-&gt;task);</div><div class="line"></div><div class="line">		<span class="comment">/*</span></div><div class="line">		 * Reset old bank context from task</div><div class="line">		 */</div><div class="line">		task_bank_reset(p-&gt;task);</div><div class="line">	&#125;</div><div class="line">bad:</div><div class="line">	proc_transend(p, <span class="number">0</span>);</div><div class="line"></div><div class="line">bad_notrans:</div><div class="line">	<span class="keyword">if</span> (imgp-&gt;ip_strings)</div><div class="line">		execargs_free(imgp);</div><div class="line">	<span class="keyword">if</span> (imgp-&gt;ip_ndp)</div><div class="line">		nameidone(imgp-&gt;ip_ndp);</div><div class="line">	<span class="keyword">if</span> (ndp)</div><div class="line">		FREE(ndp, M_TEMP);</div><div class="line"></div><div class="line">	<span class="keyword">return</span> (error);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>exec_activate_image()完成了镜像加载的所有工作，主要是寻找可执行文件并把他们拷贝在内存中，通过遍历execsw，根据可执行文件的不同类型来确定不同的加载函数，从<code>if(error)</code>可以看出这些加载过程如果不是被终止就是完成在整个流程的加载</li>
</ul>
<h3 id="1-3-exec-mach-imgact"><a href="#1-3-exec-mach-imgact" class="headerlink" title="1.3 exec_mach_imgact"></a>1.3 <code>exec_mach_imgact</code></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> execsw &#123;</div><div class="line">	<span class="keyword">int</span> (*ex_imgact)(<span class="keyword">struct</span> image_params *);</div><div class="line">	<span class="keyword">const</span> <span class="keyword">char</span> *ex_name;</div><div class="line">&#125; execsw[] = &#123;</div><div class="line">	&#123; exec_mach_imgact,		<span class="string">"Mach-o Binary"</span> &#125;,</div><div class="line">	&#123; exec_fat_imgact,		<span class="string">"Fat Binary"</span> &#125;,</div><div class="line">	&#123; exec_shell_imgact,		<span class="string">"Interpreter Script"</span> &#125;,</div><div class="line">	&#123; <span class="literal">NULL</span>, <span class="literal">NULL</span>&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>可以看出，OSX有三种可执行文件:</li>
</ul>
<ol>
<li>Mach-o由exec_mach_imgact处理</li>
<li>Fat Binary由exec_fat_imgact处理</li>
<li>Interpreter Script由exec_shell_imgact处理</li>
</ol>
<figure class="highlight xl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div><div class="line">462</div><div class="line">463</div><div class="line">464</div><div class="line">465</div><div class="line">466</div><div class="line">467</div><div class="line">468</div><div class="line">469</div><div class="line">470</div><div class="line">471</div><div class="line">472</div><div class="line">473</div><div class="line">474</div><div class="line">475</div><div class="line">476</div><div class="line">477</div><div class="line">478</div><div class="line">479</div><div class="line">480</div><div class="line">481</div><div class="line">482</div><div class="line">483</div><div class="line">484</div><div class="line">485</div></pre></td><td class="code"><pre><div class="line">static int</div><div class="line">exec_mach_imgact(struct image_params *imgp)</div><div class="line">&#123;</div><div class="line">	<span class="function"><span class="title">struct</span> mach_header *mach_header = (struct mach_header *)imgp-&gt;</span>ip_vdata;</div><div class="line">	<span class="function"><span class="title">proc_t</span>			p = vfs_context_proc(imgp-&gt;</span>ip_vfs_context);</div><div class="line">	int			error = <span class="number">0</span>;</div><div class="line">	task_t			task;</div><div class="line">	task_t			new_task = NULL; <span class="comment">/* protected by vfexec */</span></div><div class="line">	thread_t		thread;</div><div class="line">	struct uthread		*uthread;</div><div class="line">	vm_map_t old_map = VM_MAP_NULL;</div><div class="line">	vm_map_t map;</div><div class="line">	load_return_t		lret;</div><div class="line">	load_result_t		load_result;</div><div class="line">	struct _posix_spawnattr *psa = NULL;</div><div class="line">	<span class="function"><span class="title">int</span>			spawn = (imgp-&gt;</span>ip_flags &amp; IMGPF_SPAWN);</div><div class="line">	<span class="function"><span class="title">int</span>			vfexec = (imgp-&gt;</span>ip_flags &amp; IMGPF_VFORK_EXEC);</div><div class="line">	int			p_name_len;</div><div class="line"></div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * make sure it's a Mach-O 1.0 or Mach-O 2.0 binary; the difference</div><div class="line">	 * is a reserved field on the end, so for the most part, we can</div><div class="line">	 * treat them as if they were identical. Reverse-endian Mach-O</div><div class="line">	 * binaries are recognized but not compatible.</div><div class="line"> 	 */</div><div class="line"><span class="comment">//检测header中的magic来确定是否符合Mach-O的条件</span></div><div class="line">	<span class="function"><span class="title">if</span> ((mach_header-&gt;</span>magic == MH_CIGAM) ||</div><div class="line">	    (<span class="function"><span class="title">mach_header</span>-&gt;</span>magic == MH_CIGAM_64)) &#123;</div><div class="line">		error = EBADARCH;</div><div class="line">		goto bad;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="title">if</span> ((mach_header-&gt;</span>magic != MH_MAGIC) &amp;&amp;</div><div class="line">	    (<span class="function"><span class="title">mach_header</span>-&gt;</span>magic != MH_MAGIC_64)) &#123;</div><div class="line">		error = -<span class="number">1</span>;</div><div class="line">		goto bad;</div><div class="line">	&#125;</div><div class="line"><span class="comment">//检测header中的文件类型且必须为可执行文件</span></div><div class="line">	<span class="function"><span class="title">if</span> (mach_header-&gt;</span>filetype != MH_EXECUTE) &#123;</div><div class="line">		error = -<span class="number">1</span>;</div><div class="line">		goto bad;</div><div class="line">	&#125;</div><div class="line"><span class="comment">//检测Mach-O文件的CPU种类与版本</span></div><div class="line">	<span class="function"><span class="title">if</span> (imgp-&gt;</span>ip_origcputype != <span class="number">0</span>) &#123;</div><div class="line">		<span class="comment">/* Fat header previously had an idea about this thin file */</span></div><div class="line">		<span class="function"><span class="title">if</span> (imgp-&gt;</span><span class="function"><span class="title">ip_origcputype</span> != mach_header-&gt;</span>cputype ||</div><div class="line">			<span class="function"><span class="title">imgp</span>-&gt;</span><span class="function"><span class="title">ip_origcpusubtype</span> != mach_header-&gt;</span>cpusubtype) &#123;</div><div class="line">			error = EBADARCH;</div><div class="line">			goto bad;</div><div class="line">		&#125;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="function"><span class="title">imgp</span>-&gt;</span><span class="function"><span class="title">ip_origcputype</span> = mach_header-&gt;</span>cputype;</div><div class="line">		<span class="function"><span class="title">imgp</span>-&gt;</span><span class="function"><span class="title">ip_origcpusubtype</span> = mach_header-&gt;</span>cpusubtype;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	task = current_task();</div><div class="line">	thread = current_thread();</div><div class="line">	uthread = get_bsdthread_info(thread);</div><div class="line"></div><div class="line">	<span class="function"><span class="title">if</span> ((mach_header-&gt;</span>cputype &amp; CPU_ARCH_ABI64) == CPU_ARCH_ABI64)</div><div class="line">		<span class="function"><span class="title">imgp</span>-&gt;</span>ip_flags |= IMGPF_IS_64BIT;</div><div class="line"></div><div class="line">	<span class="comment">/* If posix_spawn binprefs exist, respect those prefs. */</span></div><div class="line">	<span class="function"><span class="title">psa</span> = (struct _posix_spawnattr *) imgp-&gt;</span>ip_px_sa;</div><div class="line">	<span class="function"><span class="title">if</span> (psa != NULL &amp;&amp; psa-&gt;</span>psa_binprefs[<span class="number">0</span>] != <span class="number">0</span>) &#123;</div><div class="line">		int pr = <span class="number">0</span>;</div><div class="line">		<span class="keyword">for</span> (pr = <span class="number">0</span>; pr &lt; NBINPREFS; pr++) &#123;</div><div class="line">			<span class="function"><span class="title">cpu_type_t</span> pref = psa-&gt;</span>psa_binprefs[pr];</div><div class="line">			<span class="keyword">if</span> (pref == <span class="number">0</span>) &#123;</div><div class="line">				<span class="comment">/* No suitable arch in the pref list */</span></div><div class="line">				error = EBADARCH;</div><div class="line">				goto bad;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="keyword">if</span> (pref == CPU_TYPE_ANY) &#123;</div><div class="line">				<span class="comment">/* Jump to regular grading */</span></div><div class="line">				goto grade;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="function"><span class="title">if</span> (pref == imgp-&gt;</span>ip_origcputype) &#123;</div><div class="line">				<span class="comment">/* We have a match! */</span></div><div class="line">				goto grade;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		error = EBADARCH;</div><div class="line">		goto bad;</div><div class="line">	&#125;</div><div class="line">grade:</div><div class="line">	<span class="function"><span class="title">if</span> (!grade_binary(imgp-&gt;</span><span class="function"><span class="title">ip_origcputype</span>, imgp-&gt;</span>ip_origcpusubtype &amp; ~CPU_SUBTYPE_MASK)) &#123;</div><div class="line">		error = EBADARCH;</div><div class="line">		goto bad;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/* Copy in arguments/environment from the old process */</span></div><div class="line">	error = exec_extract_strings(imgp);</div><div class="line">	<span class="keyword">if</span> (error)</div><div class="line">		goto bad;</div><div class="line"></div><div class="line">	error = exec_add_apple_strings(imgp);</div><div class="line">	<span class="keyword">if</span> (error)</div><div class="line">		goto bad;</div><div class="line"></div><div class="line">	AUDIT_ARG(<span class="function"><span class="title">argv</span>, imgp-&gt;</span><span class="function"><span class="title">ip_startargv</span>, imgp-&gt;</span>ip_argc, </div><div class="line">	    <span class="function"><span class="title">imgp</span>-&gt;</span><span class="function"><span class="title">ip_endargv</span> - imgp-&gt;</span>ip_startargv);</div><div class="line">	AUDIT_ARG(<span class="function"><span class="title">envv</span>, imgp-&gt;</span><span class="function"><span class="title">ip_endargv</span>, imgp-&gt;</span>ip_envc,</div><div class="line">	    <span class="function"><span class="title">imgp</span>-&gt;</span><span class="function"><span class="title">ip_endenvv</span> - imgp-&gt;</span>ip_endargv);</div><div class="line"></div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * We are being called to activate an image subsequent to a vfork()</div><div class="line">	 * operation; in this case, we know that our task, thread, and</div><div class="line">	 * uthread are actually those of our parent, and our proc, which we</div><div class="line">	 * obtained indirectly from the image_params vfs_context_t, is the</div><div class="line">	 * new child process.</div><div class="line">	 */</div><div class="line">	<span class="keyword">if</span> (vfexec || spawn) &#123;</div><div class="line">		<span class="keyword">if</span> (vfexec) &#123;</div><div class="line">			<span class="function"><span class="title">imgp</span>-&gt;</span><span class="function"><span class="title">ip_new_thread</span> = fork_create_child(task, NULL, p, FALSE, (imgp-&gt;</span>ip_flags &amp; IMGPF_IS_64BIT));</div><div class="line">			<span class="function"><span class="title">if</span> (imgp-&gt;</span>ip_new_thread == NULL) &#123;</div><div class="line">				error = ENOMEM;</div><div class="line">				goto bad;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">/* reset local idea of thread, uthread, task */</span></div><div class="line">		<span class="function"><span class="title">thread</span> = imgp-&gt;</span>ip_new_thread;</div><div class="line">		uthread = get_bsdthread_info(thread);</div><div class="line">		task = new_task = get_threadtask(thread);</div><div class="line">		map = get_task_map(task);</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		map = VM_MAP_NULL;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * We set these flags here; this is OK, since if we fail after</div><div class="line">	 * this point, we have already destroyed the parent process anyway.</div><div class="line">	 */</div><div class="line">	task_set_dyld_info(task, MACH_VM_MIN_ADDRESS, <span class="number">0</span>);</div><div class="line">	<span class="function"><span class="title">if</span> (imgp-&gt;</span>ip_flags &amp; IMGPF_IS_64BIT) &#123;</div><div class="line">		task_set_64bit(task, TRUE);</div><div class="line">		OSB<span class="function"><span class="title">itOrAtomic</span>(P_LP64, &amp;p-&gt;</span>p_flag);</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		task_set_64bit(task, FALSE);</div><div class="line">		OSB<span class="function"><span class="title">itAndAtomic</span>(~((uint32_t)P_LP64), &amp;p-&gt;</span>p_flag);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/*</span></div><div class="line">	 *	Load the Mach-O file.</div><div class="line">	 *</div><div class="line">	 * <span class="doctag">NOTE:</span> An error after this point  indicates we have potentially</div><div class="line">	 * destroyed or overwritten some process state while attempting an</div><div class="line">	 * execve() following a vfork(), which is an unrecoverable condition.</div><div class="line">	 * We send the new process an immediate SIGKILL to avoid it executing</div><div class="line">	 * any instructions in the mutated address space. For true spawns,</div><div class="line">	 * this is not the case, and "too late" is still not too late to</div><div class="line">	 * return an error code to the parent process.</div><div class="line">	 */</div><div class="line"></div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * Actually load the image file we previously decided to load.</div><div class="line">	 */</div><div class="line"><span class="comment">//把Mach-O文件映射到内存中并调用load_machfile函数</span></div><div class="line">	lret = load_machfile(imgp, mach_header, thread, &amp;map, &amp;load_result);</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (lret != LOAD_SUCCESS) &#123;</div><div class="line">		error = load_return_to_errno(lret);</div><div class="line">		goto badtoolate;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	proc_lock(p);</div><div class="line">	<span class="function"><span class="title">p</span>-&gt;</span><span class="function"><span class="title">p_cputype</span> = imgp-&gt;</span>ip_origcputype;</div><div class="line">	<span class="function"><span class="title">p</span>-&gt;</span><span class="function"><span class="title">p_cpusubtype</span> = imgp-&gt;</span>ip_origcpusubtype;</div><div class="line">	proc_unlock(p);</div><div class="line"></div><div class="line">	<span class="function"><span class="title">vm_map_set_user_wire_limit</span>(map, p-&gt;</span>p_rlimit[RLIMIT_MEMLOCK].rlim_cur);</div><div class="line"></div><div class="line">	<span class="comment">/* </span></div><div class="line">	 * Set code-signing flags if this binary is signed, or if parent has</div><div class="line">	 * requested them on exec.</div><div class="line">	 */</div><div class="line">	<span class="keyword">if</span> (load_result.csflags &amp; CS_VALID) &#123;</div><div class="line">		<span class="function"><span class="title">imgp</span>-&gt;</span>ip_csflags |= load_result.csflags &amp; </div><div class="line">			(CS_VALID|</div><div class="line">			 CS_HARD|CS_KILL|CS_RESTRICT|CS_ENFORCEMENT|CS_REQUIRE_LV|CS_DYLD_PLATFORM|</div><div class="line">			 CS_EXEC_SET_HARD|CS_EXEC_SET_KILL|CS_EXEC_SET_ENFORCEMENT);</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="function"><span class="title">imgp</span>-&gt;</span>ip_csflags &amp;= ~CS_VALID;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="title">if</span> (p-&gt;</span>p_csflags &amp; CS_EXEC_SET_HARD)</div><div class="line">		<span class="function"><span class="title">imgp</span>-&gt;</span>ip_csflags |= CS_HARD;</div><div class="line">	<span class="function"><span class="title">if</span> (p-&gt;</span>p_csflags &amp; CS_EXEC_SET_KILL)</div><div class="line">		<span class="function"><span class="title">imgp</span>-&gt;</span>ip_csflags |= CS_KILL;</div><div class="line">	<span class="function"><span class="title">if</span> (p-&gt;</span>p_csflags &amp; CS_EXEC_SET_ENFORCEMENT)</div><div class="line">		<span class="function"><span class="title">imgp</span>-&gt;</span>ip_csflags |= CS_ENFORCEMENT;</div><div class="line">	<span class="function"><span class="title">if</span> (p-&gt;</span>p_csflags &amp; CS_EXEC_SET_INSTALLER)</div><div class="line">		<span class="function"><span class="title">imgp</span>-&gt;</span>ip_csflags |= CS_INSTALLER;</div><div class="line"></div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * Set up the system reserved areas in the new address space.</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="title">vm_map_exec</span>(map, task, (void *)p-&gt;</span><span class="function"><span class="title">p_fd</span>-&gt;</span>fd_rdir, cpu_type());</div><div class="line"></div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * Close file descriptors which specify close-on-exec.</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="title">fdexec</span>(p, psa != NULL ? psa-&gt;</span>psa_flags : <span class="number">0</span>);</div><div class="line"></div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * deal with set[ug]id.</div><div class="line">	 */</div><div class="line">	error = exec_handle_sugid(imgp);</div><div class="line">	<span class="keyword">if</span> (error) &#123;</div><div class="line">		<span class="keyword">if</span> (spawn || !vfexec) &#123;</div><div class="line">			vm_map_deallocate(map);</div><div class="line">		&#125;</div><div class="line">		goto badtoolate;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * Commit to new map.</div><div class="line">	 *</div><div class="line">	 * Swap the new map for the old, which consumes our new map reference but</div><div class="line">	 * each leaves us responsible for the old_map reference.  That lets us get</div><div class="line">	 * off the pmap associated with it, and then we can release it.</div><div class="line">	 */</div><div class="line">	<span class="keyword">if</span> (!vfexec) &#123;</div><div class="line">		old_map = swap_task_map(task, thread, map, !spawn);</div><div class="line">		vm_map_deallocate(old_map);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	lret = activate_thread_state(thread, &amp;load_result);</div><div class="line">	<span class="keyword">if</span> (lret != KERN_SUCCESS) &#123;</div><div class="line">		goto badtoolate;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * deal with voucher on exec-calling thread.</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="title">if</span> (imgp-&gt;</span>ip_new_thread == NULL)</div><div class="line">		thread_set_mach_voucher(current_thread(), IPC_VOUCHER_NULL);</div><div class="line"></div><div class="line">	<span class="comment">/* Make sure we won't interrupt ourself signalling a partial process */</span></div><div class="line">	<span class="function"><span class="title">if</span> (!vfexec &amp;&amp; !spawn &amp;&amp; (p-&gt;</span>p_lflag &amp; P_LTRACED))</div><div class="line">		psignal(p, SIGTRAP);</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (load_result.unixproc &amp;&amp;</div><div class="line">		create_unix_stack(get_task_map(task),</div><div class="line">				  &amp;load_result,</div><div class="line">				  p) != KERN_SUCCESS) &#123;</div><div class="line">		error = load_return_to_errno(LOAD_NOSPACE);</div><div class="line">		goto badtoolate;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (vfexec || spawn) &#123;</div><div class="line">		old_map = vm_map_switch(get_task_map(task));</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (load_result.unixproc) &#123;</div><div class="line">		user_addr_t	ap;</div><div class="line"></div><div class="line">		<span class="comment">/*</span></div><div class="line">		 * Copy the strings area out into the new process address</div><div class="line">		 * space.</div><div class="line">		 */</div><div class="line">		<span class="function"><span class="title">ap</span> = p-&gt;</span>user_stack;</div><div class="line">		error = exec_copyout_strings(imgp, &amp;ap);</div><div class="line">		<span class="keyword">if</span> (error) &#123;</div><div class="line">			<span class="keyword">if</span> (vfexec || spawn)</div><div class="line">				vm_map_switch(old_map);</div><div class="line">			goto badtoolate;</div><div class="line">		&#125;</div><div class="line">		<span class="comment">/* Set the stack */</span></div><div class="line">		thread_setuserstack(thread, ap);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (load_result.dynlinker) &#123;</div><div class="line">		uint64_t	ap;</div><div class="line">		<span class="function"><span class="title">int</span>			new_ptr_size = (imgp-&gt;</span>ip_flags &amp; IMGPF_IS_64BIT) ? <span class="number">8</span> : <span class="number">4</span>;</div><div class="line"></div><div class="line">		<span class="comment">/* Adjust the stack */</span></div><div class="line">		ap = thread_adjuserstack(thread, -new_ptr_size);</div><div class="line">		error = copyoutptr(load_result.mach_header, ap, new_ptr_size);</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (error) &#123;</div><div class="line">			<span class="keyword">if</span> (vfexec || spawn)</div><div class="line">				vm_map_switch(old_map);</div><div class="line">			goto badtoolate;</div><div class="line">		&#125;</div><div class="line">		<span class="comment">//由dyld接手接下来的工作</span></div><div class="line">		task_set_dyld_info(task, load_result.all_image_info_addr,</div><div class="line">		    load_result.all_image_info_size);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/* Avoid immediate VM faults back into kernel */</span></div><div class="line">	exec_prefault_data(p, imgp, &amp;load_result);</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (vfexec || spawn) &#123;</div><div class="line">		vm_map_switch(old_map);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/* Stop profiling */</span></div><div class="line">	stopprofclock(p);</div><div class="line"></div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * Reset signal state.</div><div class="line">	 */</div><div class="line">	execsigs(p, thread);</div><div class="line"></div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * need to cancel async IO requests that can be cancelled and wait for those</div><div class="line">	 * already active.  MAY BLOCK!</div><div class="line">	 */</div><div class="line">	_aio_exec( p );</div><div class="line"></div><div class="line">#<span class="keyword">if</span> SYSV_SHM</div><div class="line">	<span class="comment">/* <span class="doctag">FIXME:</span> Till vmspace inherit is fixed: */</span></div><div class="line">	<span class="function"><span class="title">if</span> (!vfexec &amp;&amp; p-&gt;</span>vm_shm)</div><div class="line">		shmexec(p);</div><div class="line">#endif</div><div class="line">#<span class="keyword">if</span> SYSV_SEM</div><div class="line">	<span class="comment">/* Clean up the semaphores */</span></div><div class="line">	semexit(p);</div><div class="line">#endif</div><div class="line"></div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * Remember file name for accounting.</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="title">p</span>-&gt;</span>p_acflag &amp;= ~AFORK;</div><div class="line"></div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * Set p-&gt;p_comm and p-&gt;p_name to the name passed to exec</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="title">p_name_len</span> = sizeof(p-&gt;</span>p_name) - <span class="number">1</span>;</div><div class="line">	<span class="function"><span class="title">if</span>(imgp-&gt;</span><span class="function"><span class="title">ip_ndp</span>-&gt;</span>ni_cnd.cn_namelen &gt; p_name_len)</div><div class="line">		<span class="function"><span class="title">imgp</span>-&gt;</span><span class="function"><span class="title">ip_ndp</span>-&gt;</span>ni_cnd.cn_namelen = p_name_len;</div><div class="line">	<span class="function"><span class="title">bcopy</span>((caddr_t)imgp-&gt;</span><span class="function"><span class="title">ip_ndp</span>-&gt;</span><span class="function"><span class="title">ni_cnd</span>.cn_nameptr, (caddr_t)p-&gt;</span>p_name,</div><div class="line">		(<span class="function"><span class="title">unsigned</span>)imgp-&gt;</span><span class="function"><span class="title">ip_ndp</span>-&gt;</span>ni_cnd.cn_namelen);</div><div class="line">	<span class="function"><span class="title">p</span>-&gt;</span><span class="function"><span class="title">p_name</span>[imgp-&gt;</span><span class="function"><span class="title">ip_ndp</span>-&gt;</span>ni_cnd.cn_namelen] = <span class="string">'\0'</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="title">if</span> (imgp-&gt;</span><span class="function"><span class="title">ip_ndp</span>-&gt;</span>ni_cnd.cn_namelen &gt; MAXCOMLEN)</div><div class="line">		<span class="function"><span class="title">imgp</span>-&gt;</span><span class="function"><span class="title">ip_ndp</span>-&gt;</span>ni_cnd.cn_namelen = MAXCOMLEN;</div><div class="line">	<span class="function"><span class="title">bcopy</span>((caddr_t)imgp-&gt;</span><span class="function"><span class="title">ip_ndp</span>-&gt;</span><span class="function"><span class="title">ni_cnd</span>.cn_nameptr, (caddr_t)p-&gt;</span>p_comm,</div><div class="line">		(<span class="function"><span class="title">unsigned</span>)imgp-&gt;</span><span class="function"><span class="title">ip_ndp</span>-&gt;</span>ni_cnd.cn_namelen);</div><div class="line">	<span class="function"><span class="title">p</span>-&gt;</span><span class="function"><span class="title">p_comm</span>[imgp-&gt;</span><span class="function"><span class="title">ip_ndp</span>-&gt;</span>ni_cnd.cn_namelen] = <span class="string">'\0'</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="title">pal_dbg_set_task_name</span>( p-&gt;</span>task );</div><div class="line"></div><div class="line">#<span class="keyword">if</span> DEVELOPMENT || DEBUG</div><div class="line">	<span class="comment">/* </span></div><div class="line">	 * Update the pid an proc name for importance base if any</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="title">task_importance_update_owner_info</span>(p-&gt;</span>task);</div><div class="line">#endif</div><div class="line"></div><div class="line">	<span class="function"><span class="title">memcpy</span>(&amp;p-&gt;</span><span class="function"><span class="title">p_uuid</span>[0], &amp;load_result.uuid[0], sizeof(p-&gt;</span>p_uuid));</div><div class="line"></div><div class="line"><span class="comment">// &lt;rdar://6598155&gt; dtrace code cleanup needed</span></div><div class="line">#<span class="keyword">if</span> CONFIG_DTRACE</div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * Invalidate any predicate evaluation already cached for this thread by DTrace.</div><div class="line">	 * That's because we've just stored to p_comm and DTrace refers to that when it</div><div class="line">	 * evaluates the "execname" special variable. uid and gid may have changed as well.</div><div class="line">	 */</div><div class="line">	dtrace_set_thread_predcache(current_thread(), <span class="number">0</span>);</div><div class="line"></div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * Free any outstanding lazy dof entries. It is imperative we</div><div class="line">	 * always call dtrace_lazy_dofs_destroy, rather than null check</div><div class="line">	 * and call if !NULL. If we NULL test, during lazy dof faulting</div><div class="line">	 * we can race with the faulting code and proceed from here to</div><div class="line">	 * beyond the helpers cleanup. The lazy dof faulting will then</div><div class="line">	 * install new helpers which no longer belong to this process!</div><div class="line">	 */</div><div class="line">	dtrace_lazy_dofs_destroy(p);</div><div class="line"></div><div class="line"></div><div class="line">	<span class="comment">/*</span></div><div class="line">    	 * Clean up any DTrace helpers for the process.</div><div class="line">    	 */</div><div class="line">    	<span class="function"><span class="title">if</span> (p-&gt;</span>p_dtrace_helpers != NULL &amp;&amp; dtrace_helpers_cleanup) &#123;</div><div class="line">    		(*dtrace_helpers_cleanup)(p);</div><div class="line">    	&#125;</div><div class="line">	</div><div class="line">    	<span class="comment">/*</span></div><div class="line">    	 * Cleanup the DTrace provider associated with this process.</div><div class="line">    	 */</div><div class="line">	proc_lock(p);</div><div class="line">	<span class="function"><span class="title">if</span> (p-&gt;</span>p_dtrace_probes &amp;&amp; dtrace_fasttrap_exec_ptr) &#123;</div><div class="line">		(*dtrace_fasttrap_exec_ptr)(p);</div><div class="line">	&#125;</div><div class="line">	proc_unlock(p);</div><div class="line">#endif</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (kdebug_enable) &#123;</div><div class="line">		long dbg_arg1, dbg_arg2, dbg_arg3, dbg_arg4;</div><div class="line"></div><div class="line">		<span class="comment">/*</span></div><div class="line">		 * Collect the pathname for tracing</div><div class="line">		 */</div><div class="line">		kdbg_trace_string(p, &amp;dbg_arg1, &amp;dbg_arg2, &amp;dbg_arg3, &amp;dbg_arg4);</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (vfexec || spawn) &#123;</div><div class="line">			KERNEL_DEBUG_CONSTANT1(TRACE_DATA_EXEC | DBG_FUNC_NONE,</div><div class="line">					<span class="function"><span class="title">p</span>-&gt;</span>p_pid ,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>, (uintptr_t)thread_tid(thread));</div><div class="line">			KERNEL_DEBUG_CONSTANT1(TRACE_STRING_EXEC | DBG_FUNC_NONE,</div><div class="line">					dbg_arg1, dbg_arg2, dbg_arg3, dbg_arg4, (uintptr_t)thread_tid(thread));</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			KERNEL_DEBUG_CONSTANT(TRACE_DATA_EXEC | DBG_FUNC_NONE,</div><div class="line">					<span class="function"><span class="title">p</span>-&gt;</span>p_pid ,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</div><div class="line">			KERNEL_DEBUG_CONSTANT(TRACE_STRING_EXEC | DBG_FUNC_NONE,</div><div class="line">					dbg_arg1, dbg_arg2, dbg_arg3, dbg_arg4, <span class="number">0</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * If posix_spawned with the START_SUSPENDED flag, stop the</div><div class="line">	 * process before it runs.</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="title">if</span> (imgp-&gt;</span>ip_px_sa != NULL) &#123;</div><div class="line">		<span class="function"><span class="title">psa</span> = (struct _posix_spawnattr *) imgp-&gt;</span>ip_px_sa;</div><div class="line">		<span class="function"><span class="title">if</span> (psa-&gt;</span>psa_flags &amp; POSIX_SPAWN_START_SUSPENDED) &#123;</div><div class="line">			proc_lock(p);</div><div class="line">			<span class="function"><span class="title">p</span>-&gt;</span>p_stat = SSTOP;</div><div class="line">			proc_unlock(p);</div><div class="line">			(<span class="function"><span class="title">void</span>) task_suspend_internal(p-&gt;</span>task);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * mark as execed, wakeup the process that vforked (if any) and tell</div><div class="line">	 * it that it now has its own resources back</div><div class="line">	 */</div><div class="line">	OSB<span class="function"><span class="title">itOrAtomic</span>(P_EXEC, &amp;p-&gt;</span>p_flag);</div><div class="line">	proc_resetregister(p);</div><div class="line">	<span class="function"><span class="title">if</span> (p-&gt;</span><span class="function"><span class="title">p_pptr</span> &amp;&amp; (p-&gt;</span>p_lflag &amp; P_LPPWAIT)) &#123;</div><div class="line">		proc_lock(p);</div><div class="line">		<span class="function"><span class="title">p</span>-&gt;</span>p_lflag &amp;= ~P_LPPWAIT;</div><div class="line">		proc_unlock(p);</div><div class="line">		<span class="function"><span class="title">wakeup</span>((caddr_t)p-&gt;</span>p_pptr);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * Pay for our earlier safety; deliver the delayed signals from</div><div class="line">	 * the incomplete vfexec process now that it's complete.</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="title">if</span> (vfexec &amp;&amp; (p-&gt;</span>p_lflag &amp; P_LTRACED)) &#123;</div><div class="line">		psignal_vfork(p, new_task, thread, SIGTRAP);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	goto done;</div><div class="line"></div><div class="line">badtoolate:</div><div class="line">	<span class="comment">/* Don't allow child process to execute any instructions */</span></div><div class="line">	<span class="keyword">if</span> (!spawn) &#123;</div><div class="line">		<span class="keyword">if</span> (vfexec) &#123;</div><div class="line">			psignal_vfork(p, new_task, thread, SIGKILL);</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			psignal(p, SIGKILL);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">/* We can't stop this system call at this point, so just pretend we succeeded */</span></div><div class="line">		error = <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">done:</div><div class="line">	<span class="keyword">if</span> (!spawn) &#123;</div><div class="line">		<span class="comment">/* notify only if it has not failed due to FP Key error */</span></div><div class="line">		<span class="function"><span class="title">if</span> ((p-&gt;</span>p_lflag &amp; P_LTERM_DECRYPTFAIL) == <span class="number">0</span>)</div><div class="line">			proc_knote(p, NOTE_EXEC);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/* Drop extra references for cases where we don't expect the caller to clean up */</span></div><div class="line">	<span class="keyword">if</span> (vfexec || (spawn &amp;&amp; error == <span class="number">0</span>)) &#123;</div><div class="line">		task_deallocate(new_task);</div><div class="line">		thread_deallocate(thread);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (load_result.threadstate) &#123;</div><div class="line">		kfree(load_result.threadstate, load_result.threadstate_sz);</div><div class="line">		load_result.threadstate = NULL;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">bad:</div><div class="line">	return(error);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>这里主要对可执行文件的一些基本信息作了检测，如header，CPU，imgp等，然后把Mach-O文件映射到内存中，调用load_machfile()函数，由dyld加载</li>
</ul>
<h3 id="1-4-load-machfile"><a href="#1-4-load-machfile" class="headerlink" title="1.4 load_machfile"></a>1.4 <code>load_machfile</code></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">load_return_t</span></div><div class="line">load_machfile(</div><div class="line">	<span class="keyword">struct</span> image_params	*imgp,</div><div class="line">	<span class="keyword">struct</span> mach_header	*header,</div><div class="line">	<span class="keyword">thread_t</span> 		thread,</div><div class="line">	<span class="keyword">vm_map_t</span> 		*mapp,</div><div class="line">	<span class="keyword">load_result_t</span>		*result</div><div class="line">)</div><div class="line">&#123;</div><div class="line">	<span class="keyword">struct</span> vnode		*vp = imgp-&gt;ip_vp;</div><div class="line">	<span class="keyword">off_t</span>			file_offset = imgp-&gt;ip_arch_offset;</div><div class="line">	<span class="keyword">off_t</span>			macho_size = imgp-&gt;ip_arch_size;</div><div class="line">	<span class="keyword">off_t</span>			file_size = imgp-&gt;ip_vattr-&gt;va_data_size;</div><div class="line">	<span class="keyword">vm_map_t</span>		new_map = *mapp;</div><div class="line">	<span class="keyword">pmap_t</span>			pmap = <span class="number">0</span>;	<span class="comment">/* protected by create_map */</span></div><div class="line">	<span class="keyword">vm_map_t</span>		<span class="built_in">map</span>;</div><div class="line">	<span class="keyword">load_result_t</span>		myresult;</div><div class="line">	<span class="keyword">load_return_t</span>		lret;</div><div class="line">	<span class="keyword">boolean_t</span> create_map = FALSE;</div><div class="line">	<span class="keyword">boolean_t</span> enforce_hard_pagezero = TRUE;</div><div class="line">	<span class="keyword">int</span> spawn = (imgp-&gt;ip_flags &amp; IMGPF_SPAWN);</div><div class="line">	<span class="keyword">task_t</span> task = current_task();</div><div class="line">	<span class="keyword">proc_t</span> p = current_proc();</div><div class="line">	<span class="keyword">mach_vm_offset_t</span>	aslr_offset = <span class="number">0</span>;</div><div class="line">	<span class="keyword">mach_vm_offset_t</span>	dyld_aslr_offset = <span class="number">0</span>;</div><div class="line">	<span class="keyword">kern_return_t</span> 		kret;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (macho_size &gt; file_size) &#123;</div><div class="line">		<span class="keyword">return</span>(LOAD_BADMACHO);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (new_map == VM_MAP_NULL) &#123;</div><div class="line">		create_map = TRUE;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * If we are spawning, we have created backing objects for the process</div><div class="line">	 * already, which include non-lazily creating the task map.  So we</div><div class="line">	 * are going to switch out the task map with one appropriate for the</div><div class="line">	 * bitness of the image being loaded.</div><div class="line">	 */</div><div class="line">	<span class="keyword">if</span> (spawn) &#123;</div><div class="line">		create_map = TRUE;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (create_map) &#123;</div><div class="line">		<span class="keyword">task_t</span> ledger_task;</div><div class="line">		<span class="keyword">if</span> (imgp-&gt;ip_new_thread) &#123;</div><div class="line">			ledger_task = get_threadtask(imgp-&gt;ip_new_thread);</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			ledger_task = task;</div><div class="line">		&#125;</div><div class="line">		pmap = pmap_create(get_task_ledger(ledger_task),</div><div class="line">				   (<span class="keyword">vm_map_size_t</span>) <span class="number">0</span>,</div><div class="line">				   ((imgp-&gt;ip_flags &amp; IMGPF_IS_64BIT) != <span class="number">0</span>));</div><div class="line">		pal_switch_pmap(thread, pmap, imgp-&gt;ip_flags &amp; IMGPF_IS_64BIT);</div><div class="line">		<span class="built_in">map</span> = vm_map_create(pmap,</div><div class="line">				<span class="number">0</span>,</div><div class="line">				vm_compute_max_offset(((imgp-&gt;ip_flags &amp; IMGPF_IS_64BIT) == IMGPF_IS_64BIT)),</div><div class="line">				TRUE);</div><div class="line">	&#125; <span class="keyword">else</span></div><div class="line">		<span class="built_in">map</span> = new_map;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span>   (__ARM_ARCH_7K__ &gt;= 2) &amp;&amp; defined(PLATFORM_WatchOS)</span></div><div class="line">	<span class="comment">/* enforce 16KB alignment for watch targets with new ABI */</span></div><div class="line">	vm_map_set_page_shift(<span class="built_in">map</span>, SIXTEENK_PAGE_SHIFT);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* __arm64__ */</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span>	CONFIG_ENFORCE_SIGNED_CODE</span></div><div class="line">	<span class="comment">/* This turns off faulting for executable pages, which allows</span></div><div class="line">	 * to circumvent Code Signing Enforcement. The per process</div><div class="line">	 * flag (CS_ENFORCEMENT) is not set yet, but we can use the</div><div class="line">	 * global flag.</div><div class="line">	 */</div><div class="line">	<span class="keyword">if</span> ( !cs_enforcement(<span class="literal">NULL</span>) &amp;&amp; (header-&gt;flags &amp; MH_ALLOW_STACK_EXECUTION) )</div><div class="line">	        vm_map_disable_NX(<span class="built_in">map</span>);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line">	<span class="comment">/* Forcibly disallow execution from data pages on even if the arch</span></div><div class="line">	 * normally permits it. */</div><div class="line">	<span class="comment">////将内存设置为不可执行，用来防止产生溢出漏洞</span></div><div class="line">	<span class="keyword">if</span> ((header-&gt;flags &amp; MH_NO_HEAP_EXECUTION) &amp;&amp; !(imgp-&gt;ip_flags &amp; IMGPF_ALLOW_DATA_EXEC))</div><div class="line">		vm_map_disallow_data_exec(<span class="built_in">map</span>);</div><div class="line">	</div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * Compute a random offset for ASLR, and an independent random offset for dyld.</div><div class="line">	 */</div><div class="line">	<span class="comment">//计算ASLR的偏移量</span></div><div class="line">	<span class="keyword">if</span> (!(imgp-&gt;ip_flags &amp; IMGPF_DISABLE_ASLR)) &#123;</div><div class="line">		<span class="keyword">uint64_t</span> max_slide_pages;</div><div class="line"></div><div class="line">		max_slide_pages = vm_map_get_max_aslr_slide_pages(<span class="built_in">map</span>);</div><div class="line"></div><div class="line">		aslr_offset = random();</div><div class="line">		aslr_offset %= max_slide_pages;</div><div class="line">		aslr_offset &lt;&lt;= vm_map_page_shift(<span class="built_in">map</span>);</div><div class="line"></div><div class="line">		dyld_aslr_offset = random();</div><div class="line">		dyld_aslr_offset %= max_slide_pages;</div><div class="line">		dyld_aslr_offset &lt;&lt;= vm_map_page_shift(<span class="built_in">map</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">if</span> (!result)</div><div class="line">		result = &amp;myresult;</div><div class="line"></div><div class="line">	*result = load_result_null;</div><div class="line">	<span class="comment">//解析Mach-O文件</span></div><div class="line">	lret = parse_machfile(vp, <span class="built_in">map</span>, thread, header, file_offset, macho_size,</div><div class="line">	                      <span class="number">0</span>, (<span class="keyword">int64_t</span>)aslr_offset, (<span class="keyword">int64_t</span>)dyld_aslr_offset, result);</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (lret != LOAD_SUCCESS) &#123;</div><div class="line">		<span class="keyword">if</span> (create_map) &#123;</div><div class="line">			vm_map_deallocate(<span class="built_in">map</span>);	<span class="comment">/* will lose pmap reference too */</span></div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span>(lret);</div><div class="line">	&#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> __x86_64__</span></div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * On x86, for compatibility, don't enforce the hard page-zero restriction for 32-bit binaries.</div><div class="line">	 */</div><div class="line">	<span class="keyword">if</span> ((imgp-&gt;ip_flags &amp; IMGPF_IS_64BIT) == <span class="number">0</span>) &#123;</div><div class="line">		enforce_hard_pagezero = FALSE;</div><div class="line">	&#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * Check to see if the page zero is enforced by the map-&gt;min_offset.</div><div class="line">	 */ </div><div class="line">	<span class="keyword">if</span> (enforce_hard_pagezero &amp;&amp;</div><div class="line">	    (vm_map_has_hard_pagezero(<span class="built_in">map</span>, <span class="number">0x1000</span>) == FALSE)) &#123;</div><div class="line">		&#123;</div><div class="line">			<span class="keyword">if</span> (create_map) &#123;</div><div class="line">				vm_map_deallocate(<span class="built_in">map</span>);	<span class="comment">/* will lose pmap reference too */</span></div><div class="line">			&#125;</div><div class="line">			<span class="keyword">return</span> (LOAD_BADMACHO);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (create_map) &#123;</div><div class="line">		<span class="comment">/*</span></div><div class="line">		 * If this is an exec, then we are going to destroy the old</div><div class="line">		 * task, and it's correct to halt it; if it's spawn, the</div><div class="line">		 * task is not yet running, and it makes no sense.</div><div class="line">		 */</div><div class="line">		<span class="keyword">if</span> (!spawn) &#123;</div><div class="line">			<span class="comment">/*</span></div><div class="line">			 * Mark the task as halting and start the other</div><div class="line">			 * threads towards terminating themselves.  Then</div><div class="line">			 * make sure any threads waiting for a process</div><div class="line">			 * transition get informed that we are committed to</div><div class="line">			 * this transition, and then finally complete the</div><div class="line">			 * task halting (wait for threads and then cleanup</div><div class="line">			 * task resources).</div><div class="line">			 *</div><div class="line">			 * <span class="doctag">NOTE:</span> task_start_halt() makes sure that no new</div><div class="line">			 * threads are created in the task during the transition.</div><div class="line">			 * We need to mark the workqueue as exiting before we</div><div class="line">			 * wait for threads to terminate (at the end of which</div><div class="line">			 * we no longer have a prohibition on thread creation).</div><div class="line">			 * </div><div class="line">			 * Finally, clean up any lingering workqueue data structures</div><div class="line">			 * that may have been left behind by the workqueue threads</div><div class="line">			 * as they exited (and then clean up the work queue itself).</div><div class="line">			 */</div><div class="line">			kret = task_start_halt(task);</div><div class="line">			<span class="keyword">if</span> (kret != KERN_SUCCESS) &#123;</div><div class="line">				vm_map_deallocate(<span class="built_in">map</span>);	<span class="comment">/* will lose pmap reference too */</span></div><div class="line">				<span class="keyword">return</span> (LOAD_FAILURE);</div><div class="line">			&#125;</div><div class="line">			proc_transcommit(p, <span class="number">0</span>);</div><div class="line">			workqueue_mark_exiting(p);</div><div class="line">			task_complete_halt(task);</div><div class="line">			workqueue_exit(p);</div><div class="line">			kqueue_dealloc(p-&gt;p_wqkqueue);</div><div class="line">			p-&gt;p_wqkqueue = <span class="literal">NULL</span>;</div><div class="line">		&#125;</div><div class="line">		*mapp = <span class="built_in">map</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span>(LOAD_SUCCESS);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> macho_printf = <span class="number">0</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MACHO_PRINTF(args)				\</span></div><div class="line">	do &#123;						\</div><div class="line">		<span class="meta-keyword">if</span> (macho_printf) &#123;			\</div><div class="line">			printf args;			\</div><div class="line">		&#125;					\</div><div class="line">	&#125; while (0)</div></pre></td></tr></table></figure>
<ul>
<li>主要解析了Mach-O文件，设置内存不可执行，防止了产生溢出漏洞，还设置了ASLR偏移</li>
</ul>
<h3 id="1-5-parse-machfile"><a href="#1-5-parse-machfile" class="headerlink" title="1.5 parse_machfile"></a>1.5 <code>parse_machfile</code></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span></span></div><div class="line">load_return_t</div><div class="line"><span class="title">parse_machfile</span><span class="params">(</span></div><div class="line">	<span class="keyword">struct</span> vnode 		*vp,       </div><div class="line">	<span class="keyword">vm_map_t</span>		<span class="built_in">map</span>,</div><div class="line">	<span class="keyword">thread_t</span>		thread,</div><div class="line">	<span class="keyword">struct</span> mach_header	*header,</div><div class="line">	<span class="keyword">off_t</span>			file_offset,</div><div class="line">	<span class="keyword">off_t</span>			macho_size,</div><div class="line">	<span class="keyword">int</span>			depth,</div><div class="line">	<span class="keyword">int64_t</span>			aslr_offset,</div><div class="line">	<span class="keyword">int64_t</span>			dyld_aslr_offset,</div><div class="line">	<span class="keyword">load_result_t</span>		*result</div><div class="line">)</div><div class="line">&#123;</div><div class="line">	<span class="keyword">uint32_t</span>		ncmds;</div><div class="line">	<span class="keyword">struct</span> load_command	*lcp;</div><div class="line">	<span class="keyword">struct</span> dylinker_command	*dlp = <span class="number">0</span>;</div><div class="line">	<span class="keyword">integer_t</span>		dlarchbits = <span class="number">0</span>;</div><div class="line">	<span class="keyword">void</span> *			control;</div><div class="line">	<span class="keyword">load_return_t</span>		ret = LOAD_SUCCESS;</div><div class="line">	<span class="keyword">caddr_t</span>			addr;</div><div class="line">	<span class="keyword">void</span> *			kl_addr;</div><div class="line">	<span class="keyword">vm_size_t</span>		size,kl_size;</div><div class="line">	<span class="keyword">size_t</span>			offset;</div><div class="line">	<span class="keyword">size_t</span>			oldoffset;	<span class="comment">/* for overflow check */</span></div><div class="line">	<span class="keyword">int</span>			pass;</div><div class="line">	<span class="keyword">proc_t</span>			p = current_proc();		<span class="comment">/* XXXX */</span></div><div class="line">	<span class="keyword">int</span>			error;</div><div class="line">	<span class="keyword">int</span> 			resid = <span class="number">0</span>;</div><div class="line">	<span class="keyword">size_t</span>			mach_header_sz = <span class="keyword">sizeof</span>(<span class="keyword">struct</span> mach_header);</div><div class="line">	<span class="keyword">boolean_t</span>		abi64;</div><div class="line">	<span class="keyword">boolean_t</span>		got_code_signatures = FALSE;</div><div class="line">	<span class="keyword">int64_t</span>			slide = <span class="number">0</span>;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (header-&gt;magic == MH_MAGIC_64 ||</div><div class="line">	    header-&gt;magic == MH_CIGAM_64) &#123;</div><div class="line">	    	mach_header_sz = <span class="keyword">sizeof</span>(<span class="keyword">struct</span> mach_header_64);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/*</span></div><div class="line">	 *	Break infinite recursion</div><div class="line">	 */</div><div class="line">	<span class="keyword">if</span> (depth &gt; <span class="number">1</span>) &#123;</div><div class="line">		<span class="keyword">return</span>(LOAD_FAILURE);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	depth++;</div><div class="line"></div><div class="line">	<span class="comment">/*</span></div><div class="line">	 *	Check to see if right machine type.</div><div class="line">	 */</div><div class="line">	<span class="keyword">if</span> (((<span class="keyword">cpu_type_t</span>)(header-&gt;cputype &amp; ~CPU_ARCH_MASK) != (cpu_type() &amp; ~CPU_ARCH_MASK)) ||</div><div class="line">	    !grade_binary(header-&gt;cputype, </div><div class="line">	    	header-&gt;cpusubtype &amp; ~CPU_SUBTYPE_MASK))</div><div class="line">		<span class="keyword">return</span>(LOAD_BADARCH);</div><div class="line">		</div><div class="line">	abi64 = ((header-&gt;cputype &amp; CPU_ARCH_ABI64) == CPU_ARCH_ABI64);</div><div class="line">		</div><div class="line">	<span class="keyword">switch</span> (header-&gt;filetype) &#123;</div><div class="line">	</div><div class="line">	<span class="keyword">case</span> MH_EXECUTE:</div><div class="line">		<span class="keyword">if</span> (depth != <span class="number">1</span>) &#123;</div><div class="line">			<span class="keyword">return</span> (LOAD_FAILURE);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">break</span>;</div><div class="line">	<span class="keyword">case</span> MH_DYLINKER:</div><div class="line">		<span class="keyword">if</span> (depth != <span class="number">2</span>) &#123;</div><div class="line">			<span class="keyword">return</span> (LOAD_FAILURE);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">break</span>;</div><div class="line">		</div><div class="line">	<span class="keyword">default</span>:</div><div class="line">		<span class="keyword">return</span> (LOAD_FAILURE);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/*</span></div><div class="line">	 *	Get the pager for the file.</div><div class="line">	 */</div><div class="line">	control = ubc_getobject(vp, UBC_FLAGS_NONE);</div><div class="line"></div><div class="line">	<span class="comment">/*</span></div><div class="line">	 *	Map portion that must be accessible directly into</div><div class="line">	 *	kernel's map.</div><div class="line">	 */</div><div class="line">	<span class="keyword">if</span> ((<span class="keyword">off_t</span>)(mach_header_sz + header-&gt;sizeofcmds) &gt; macho_size)</div><div class="line">		<span class="keyword">return</span>(LOAD_BADMACHO);</div><div class="line"></div><div class="line">	<span class="comment">/*</span></div><div class="line">	 *	Round size of Mach-O commands up to page boundry.</div><div class="line">	 */</div><div class="line">	size = round_page(mach_header_sz + header-&gt;sizeofcmds);</div><div class="line">	<span class="keyword">if</span> (size &lt;= <span class="number">0</span>)</div><div class="line">		<span class="keyword">return</span>(LOAD_BADMACHO);</div><div class="line"></div><div class="line">	<span class="comment">/*</span></div><div class="line">	 * Map the load commands into kernel memory.</div><div class="line">	 */</div><div class="line">	addr = <span class="number">0</span>;</div><div class="line">	kl_size = size;</div><div class="line">	kl_addr = kalloc(size);</div><div class="line">	addr = (<span class="keyword">caddr_t</span>)kl_addr;</div><div class="line">	<span class="keyword">if</span> (addr == <span class="literal">NULL</span>)</div><div class="line">		<span class="keyword">return</span>(LOAD_NOSPACE);</div><div class="line"></div><div class="line">	error = vn_rdwr(UIO_READ, vp, addr, size, file_offset,</div><div class="line">	    UIO_SYSSPACE, <span class="number">0</span>, kauth_cred_get(), &amp;resid, p);</div><div class="line">	<span class="keyword">if</span> (error) &#123;</div><div class="line">		<span class="keyword">if</span> (kl_addr)</div><div class="line">			kfree(kl_addr, kl_size);</div><div class="line">		<span class="keyword">return</span>(LOAD_IOERROR);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (resid) &#123;</div><div class="line">		<span class="comment">/* We must be able to read in as much as the mach_header indicated */</span></div><div class="line">		<span class="keyword">if</span> (kl_addr)</div><div class="line">			kfree(kl_addr, kl_size);</div><div class="line">		<span class="keyword">return</span>(LOAD_BADMACHO);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/*</span></div><div class="line">	 *	For PIE and dyld, slide everything by the ASLR offset.</div><div class="line">	 */</div><div class="line">	<span class="keyword">if</span> ((header-&gt;flags &amp; MH_PIE) || (header-&gt;filetype == MH_DYLINKER)) &#123;</div><div class="line">		slide = aslr_offset;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	 <span class="comment">/*</span></div><div class="line">	 *  Scan through the commands, processing each one as necessary.</div><div class="line">	 *  We parse in three passes through the headers:</div><div class="line">	 *  0: determine if TEXT and DATA boundary can be page-aligned</div><div class="line">	 *  1: thread state, uuid, code signature</div><div class="line">	 *  2: segments</div><div class="line">	 *  3: dyld, encryption, check entry point</div><div class="line">	 */</div><div class="line">	</div><div class="line">	<span class="keyword">for</span> (pass = <span class="number">0</span>; pass &lt;= <span class="number">3</span>; pass++) &#123;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (pass == <span class="number">0</span>) &#123;</div><div class="line">			<span class="comment">/* see if we need to adjust the slide to re-align... */</span></div><div class="line">			<span class="comment">/* no re-alignment needed on X86_64 or ARM32 kernel */</span></div><div class="line">			<span class="keyword">continue</span>;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (pass == <span class="number">1</span>) &#123;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">/*</span></div><div class="line">		 * Check that the entry point is contained in an executable segments</div><div class="line">		 */ </div><div class="line">		<span class="keyword">if</span> ((pass == <span class="number">3</span>) &amp;&amp; (!result-&gt;using_lcmain &amp;&amp; result-&gt;validentry == <span class="number">0</span>)) &#123;</div><div class="line">			thread_state_initialize(thread);</div><div class="line">			ret = LOAD_FAILURE;</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">/*</span></div><div class="line">		 * Loop through each of the load_commands indicated by the</div><div class="line">		 * Mach-O header; if an absurd value is provided, we just</div><div class="line">		 * run off the end of the reserved section by incrementing</div><div class="line">		 * the offset too far, so we are implicitly fail-safe.</div><div class="line">		 */</div><div class="line">		offset = mach_header_sz;</div><div class="line">		ncmds = header-&gt;ncmds;</div><div class="line"></div><div class="line">		<span class="keyword">while</span> (ncmds--) &#123;</div><div class="line">			<span class="comment">/*</span></div><div class="line">			 *	Get a pointer to the command.</div><div class="line">			 */</div><div class="line">			lcp = (<span class="keyword">struct</span> load_command *)(addr + offset);</div><div class="line">			oldoffset = offset;</div><div class="line">			offset += lcp-&gt;cmdsize;</div><div class="line"></div><div class="line">			<span class="comment">/*</span></div><div class="line">			 * Perform prevalidation of the struct load_command</div><div class="line">			 * before we attempt to use its contents.  Invalid</div><div class="line">			 * values are ones which result in an overflow, or</div><div class="line">			 * which can not possibly be valid commands, or which</div><div class="line">			 * straddle or exist past the reserved section at the</div><div class="line">			 * start of the image.</div><div class="line">			 */</div><div class="line">			<span class="keyword">if</span> (oldoffset &gt; offset ||</div><div class="line">			    lcp-&gt;cmdsize &lt; <span class="keyword">sizeof</span>(<span class="keyword">struct</span> load_command) ||</div><div class="line">			    offset &gt; header-&gt;sizeofcmds + mach_header_sz) &#123;</div><div class="line">				ret = LOAD_BADMACHO;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="comment">/*</span></div><div class="line">			 * Act on struct load_command's for which kernel</div><div class="line">			 * intervention is required.</div><div class="line">			 */</div><div class="line">			<span class="keyword">switch</span>(lcp-&gt;cmd) &#123;</div><div class="line">				<span class="comment">//加载segment的数据并映射到进程的内存空间中</span></div><div class="line">			<span class="keyword">case</span> LC_SEGMENT:</div><div class="line">				<span class="keyword">if</span> (pass == <span class="number">0</span>) &#123;</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				<span class="keyword">if</span> (pass != <span class="number">2</span>)</div><div class="line">					<span class="keyword">break</span>;</div><div class="line"></div><div class="line">				<span class="keyword">if</span> (abi64) &#123;</div><div class="line">					<span class="comment">/*</span></div><div class="line">					 * Having an LC_SEGMENT command for the</div><div class="line">					 * wrong ABI is invalid &lt;rdar://problem/11021230&gt;</div><div class="line">					 */</div><div class="line">					ret = LOAD_BADMACHO;</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				ret = load_segment(lcp,</div><div class="line">				                   header-&gt;filetype,</div><div class="line">				                   control,</div><div class="line">				                   file_offset,</div><div class="line">				                   macho_size,</div><div class="line">				                   vp,</div><div class="line">				                   <span class="built_in">map</span>,</div><div class="line">				                   slide,</div><div class="line">				                   result);</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			<span class="keyword">case</span> LC_SEGMENT_64:</div><div class="line">				<span class="keyword">if</span> (pass != <span class="number">2</span>)</div><div class="line">					<span class="keyword">break</span>;</div><div class="line"></div><div class="line">				<span class="keyword">if</span> (!abi64) &#123;</div><div class="line">					<span class="comment">/*</span></div><div class="line">					 * Having an LC_SEGMENT_64 command for the</div><div class="line">					 * wrong ABI is invalid &lt;rdar://problem/11021230&gt;</div><div class="line">					 */</div><div class="line">					ret = LOAD_BADMACHO;</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				ret = load_segment(lcp,</div><div class="line">				                   header-&gt;filetype,</div><div class="line">				                   control,</div><div class="line">				                   file_offset,</div><div class="line">				                   macho_size,</div><div class="line">				                   vp,</div><div class="line">				                   <span class="built_in">map</span>,</div><div class="line">				                   slide,</div><div class="line">				                   result);</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">				<span class="comment">//开一个Unix线程</span></div><div class="line">			<span class="keyword">case</span> LC_UNIXTHREAD:</div><div class="line">				<span class="keyword">if</span> (pass != <span class="number">1</span>)</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				ret = load_unixthread(</div><div class="line">						 (<span class="keyword">struct</span> thread_command *) lcp,</div><div class="line">						 thread,</div><div class="line">						 slide,</div><div class="line">						 result);</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			<span class="keyword">case</span> LC_MAIN:</div><div class="line">				<span class="keyword">if</span> (pass != <span class="number">1</span>)</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				<span class="keyword">if</span> (depth != <span class="number">1</span>)</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				ret = load_main(</div><div class="line">						 (<span class="keyword">struct</span> entry_point_command *) lcp,</div><div class="line">						 thread,</div><div class="line">						 slide,</div><div class="line">						 result);</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">				<span class="comment">//启动dyld</span></div><div class="line">			<span class="keyword">case</span> LC_LOAD_DYLINKER:</div><div class="line">				<span class="keyword">if</span> (pass != <span class="number">3</span>)</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				<span class="keyword">if</span> ((depth == <span class="number">1</span>) &amp;&amp; (dlp == <span class="number">0</span>)) &#123;</div><div class="line">					dlp = (<span class="keyword">struct</span> dylinker_command *)lcp;</div><div class="line">					dlarchbits = (header-&gt;cputype &amp; CPU_ARCH_MASK);</div><div class="line">				&#125; <span class="keyword">else</span> &#123;</div><div class="line">					ret = LOAD_FAILURE;</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">				<span class="comment">//加载UUID</span></div><div class="line">			<span class="keyword">case</span> LC_UUID:</div><div class="line">				<span class="keyword">if</span> (pass == <span class="number">1</span> &amp;&amp; depth == <span class="number">1</span>) &#123;</div><div class="line">					ret = load_uuid((<span class="keyword">struct</span> uuid_command *) lcp,</div><div class="line">							(<span class="keyword">char</span> *)addr + mach_header_sz + header-&gt;sizeofcmds,</div><div class="line">							result);</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			<span class="keyword">case</span> LC_CODE_SIGNATURE:</div><div class="line">				<span class="comment">/* CODE SIGNING */</span></div><div class="line">				<span class="keyword">if</span> (pass != <span class="number">1</span>)</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				<span class="comment">/* pager -&gt; uip -&gt;</span></div><div class="line">				   load signatures &amp; store in uip</div><div class="line">				   set VM object "signed_pages"</div><div class="line">				*/</div><div class="line">				ret = load_code_signature(</div><div class="line">					(<span class="keyword">struct</span> linkedit_data_command *) lcp,</div><div class="line">					vp,</div><div class="line">					file_offset,</div><div class="line">					macho_size,</div><div class="line">					header-&gt;cputype,</div><div class="line">					result);</div><div class="line">				<span class="keyword">if</span> (ret != LOAD_SUCCESS) &#123;</div><div class="line">					<span class="built_in">printf</span>(<span class="string">"proc %d: load code signature error %d "</span></div><div class="line">					       <span class="string">"for file \"%s\"\n"</span>,</div><div class="line">					       p-&gt;p_pid, ret, vp-&gt;v_name);</div><div class="line">					<span class="comment">/*</span></div><div class="line">					 * Allow injections to be ignored on devices w/o enforcement enabled</div><div class="line">					 */</div><div class="line">					<span class="keyword">if</span> (!cs_enforcement(<span class="literal">NULL</span>))</div><div class="line">					    ret = LOAD_SUCCESS; <span class="comment">/* ignore error */</span></div><div class="line"></div><div class="line">				&#125; <span class="keyword">else</span> &#123;</div><div class="line">					got_code_signatures = TRUE;</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				<span class="keyword">if</span> (got_code_signatures) &#123;</div><div class="line">					<span class="keyword">unsigned</span> tainted = CS_VALIDATE_TAINTED;</div><div class="line">					<span class="keyword">boolean_t</span> valid = FALSE;</div><div class="line">					<span class="keyword">struct</span> cs_blob *blobs;</div><div class="line">					<span class="keyword">vm_size_t</span> off = <span class="number">0</span>;</div><div class="line"></div><div class="line"></div><div class="line">					<span class="keyword">if</span> (cs_debug &gt; <span class="number">10</span>)</div><div class="line">						<span class="built_in">printf</span>(<span class="string">"validating initial pages of %s\n"</span>, vp-&gt;v_name);</div><div class="line">					blobs = ubc_get_cs_blobs(vp);</div><div class="line">					</div><div class="line">					<span class="keyword">while</span> (off &lt; size &amp;&amp; ret == LOAD_SUCCESS) &#123;</div><div class="line">					     tainted = CS_VALIDATE_TAINTED;</div><div class="line"></div><div class="line">					     valid = cs_validate_page(blobs,</div><div class="line">								      <span class="literal">NULL</span>,</div><div class="line">								      file_offset + off,</div><div class="line">								      addr + off,</div><div class="line">								      &amp;tainted);</div><div class="line">					     <span class="keyword">if</span> (!valid || (tainted &amp; CS_VALIDATE_TAINTED)) &#123;</div><div class="line">						     <span class="keyword">if</span> (cs_debug)</div><div class="line">							     <span class="built_in">printf</span>(<span class="string">"CODE SIGNING: %s[%d]: invalid initial page at offset %lld validated:%d tainted:%d csflags:0x%x\n"</span>, </div><div class="line">								    vp-&gt;v_name, p-&gt;p_pid, (<span class="keyword">long</span> <span class="keyword">long</span>)(file_offset + off), valid, tainted, result-&gt;csflags);</div><div class="line">						     <span class="keyword">if</span> (cs_enforcement(<span class="literal">NULL</span>) ||</div><div class="line">							 (result-&gt;csflags &amp; (CS_HARD|CS_KILL|CS_ENFORCEMENT))) &#123;</div><div class="line">							     ret = LOAD_FAILURE;</div><div class="line">						     &#125;</div><div class="line">						     result-&gt;csflags &amp;= ~CS_VALID;</div><div class="line">					     &#125;</div><div class="line">					     off += PAGE_SIZE;</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				<span class="keyword">break</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> CONFIG_CODE_DECRYPTION</span></div><div class="line">			<span class="keyword">case</span> LC_ENCRYPTION_INFO:</div><div class="line">			<span class="keyword">case</span> LC_ENCRYPTION_INFO_64:</div><div class="line">				<span class="keyword">if</span> (pass != <span class="number">3</span>)</div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				ret = set_code_unprotect(</div><div class="line">					(<span class="keyword">struct</span> encryption_info_command *) lcp,</div><div class="line">					addr, <span class="built_in">map</span>, slide, vp, file_offset,</div><div class="line">					header-&gt;cputype, header-&gt;cpusubtype);</div><div class="line">				<span class="keyword">if</span> (ret != LOAD_SUCCESS) &#123;</div><div class="line">					<span class="built_in">printf</span>(<span class="string">"proc %d: set_code_unprotect() error %d "</span></div><div class="line">					       <span class="string">"for file \"%s\"\n"</span>,</div><div class="line">					       p-&gt;p_pid, ret, vp-&gt;v_name);</div><div class="line">					<span class="comment">/* </span></div><div class="line">					 * Don't let the app run if it's </div><div class="line">					 * encrypted but we failed to set up the</div><div class="line">					 * decrypter. If the keys are missing it will</div><div class="line">					 * return LOAD_DECRYPTFAIL.</div><div class="line">					 */</div><div class="line">					 <span class="keyword">if</span> (ret == LOAD_DECRYPTFAIL) &#123;</div><div class="line">						<span class="comment">/* failed to load due to missing FP keys */</span></div><div class="line">						proc_lock(p);</div><div class="line">						p-&gt;p_lflag |= P_LTERM_DECRYPTFAIL;</div><div class="line">						proc_unlock(p);</div><div class="line">					 &#125;</div><div class="line">					 psignal(p, SIGKILL);</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">			<span class="keyword">default</span>:</div><div class="line">				<span class="comment">/* Other commands are ignored by the kernel */</span></div><div class="line">				ret = LOAD_SUCCESS;</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span> (ret != LOAD_SUCCESS)</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (ret != LOAD_SUCCESS)</div><div class="line">			<span class="keyword">break</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (ret == LOAD_SUCCESS) &#123; </div><div class="line">		<span class="keyword">if</span> (! got_code_signatures) &#123;</div><div class="line">			<span class="keyword">if</span> (cs_enforcement(<span class="literal">NULL</span>)) &#123;</div><div class="line">				ret = LOAD_FAILURE;</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">                               <span class="comment">/*</span></div><div class="line">                                * No embedded signatures: look for detached by taskgated,</div><div class="line">                                * this is only done on OSX, on embedded platforms we expect everything</div><div class="line">                                * to be have embedded signatures.</div><div class="line">                                */</div><div class="line">				<span class="keyword">struct</span> cs_blob *blob;</div><div class="line"></div><div class="line">				blob = ubc_cs_blob_get(vp, <span class="number">-1</span>, file_offset);</div><div class="line">				<span class="keyword">if</span> (blob != <span class="literal">NULL</span>) &#123;</div><div class="line">					<span class="keyword">unsigned</span> <span class="keyword">int</span> cs_flag_data = blob-&gt;csb_flags;</div><div class="line">					<span class="keyword">if</span>(<span class="number">0</span> != ubc_cs_generation_check(vp)) &#123;</div><div class="line">						<span class="keyword">if</span> (<span class="number">0</span> != ubc_cs_blob_revalidate(vp, blob, <span class="number">0</span>)) &#123;</div><div class="line">							<span class="comment">/* clear out the flag data if revalidation fails */</span></div><div class="line">							cs_flag_data = <span class="number">0</span>;</div><div class="line">							result-&gt;csflags &amp;= ~CS_VALID;</div><div class="line">						&#125;</div><div class="line">					&#125;</div><div class="line">					<span class="comment">/* get flags to be applied to the process */</span></div><div class="line">					result-&gt;csflags |= cs_flag_data;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div></pre></td></tr></table></figure>
<ul>
<li>根据load_command的不同，加载不同的函数</li>
</ul>
<blockquote>
<p>以上只是比较粗略的了解了Mach-O的加载流程，之后还需理解的更透彻，如有不足的地方还希望可以多多指正^_^<br>参考:</p>
<ul>
<li><a href="http://turingh.github.io/2016/03/30/OSX内核加载mach-o流程分析/#1-5_parse_machfile" target="_blank" rel="external">http://turingh.github.io/2016/03/30/OSX内核加载mach-o流程分析/#1-5_parse_machfile</a></li>
</ul>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> OSX </tag>
            
            <tag> Mach-O </tag>
            
            <tag> dyld </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[某记账App内购破解]]></title>
      <url>http://Hello-Sherlock.github.io/2016/12/20/five-Blog/</url>
      <content type="html"><![CDATA[<blockquote>
<p>简介:此app名称为EasyCost，是笔者目前为止用过的用户界面相对友好的一款记账app，奈何用了很久之后才发现有个所谓的高级功能，咦，看到自动账单这个功能，很高级有木有，鉴于最近才转逆向，于是抱着研究的心态尝试破解，也希望对一些同时刚接触逆向的新手朋友一点点启发。</p>
</blockquote>
<a id="more"></a>
<p><img src="http://oh5mz2415.bkt.clouddn.com/IMG_2811.PNG" alt="IMG_2811.PNG"></p>
<h3 id="1-1分析源代码结构，并定位关键函数"><a href="#1-1分析源代码结构，并定位关键函数" class="headerlink" title="1.1分析源代码结构，并定位关键函数"></a>1.1分析源代码结构，并定位关键函数</h3><h4 id="1-1-1-首先使用dumpdecrypted砸壳"><a href="#1-1-1-首先使用dumpdecrypted砸壳" class="headerlink" title="1.1.1 首先使用dumpdecrypted砸壳"></a>1.1.1 首先使用dumpdecrypted砸壳</h4><ul>
<li>关于dumpdecrypted详细介绍在<a href="http://bbs.iosre.com/t/dumpdecrypted-app/22" target="_blank" rel="external">这里</a>就不再赘述了</li>
<li>首先ssh到越狱的手机，单独打开easycost，在终端执行<code>ps -e</code> 就可以看到当前app的进程名 </li>
</ul>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">linguochengde-iPhone:~ root<span class="meta"># ps -e</span></div><div class="line">PID TTY TIME CMD</div><div class="line"></div><div class="line"><span class="number">1</span> ?? <span class="number">0</span>:<span class="number">09.72</span> <span class="meta-keyword">/sbin/</span>launchd</div><div class="line"></div><div class="line"><span class="number">18</span> ?? <span class="number">0</span>:<span class="number">00.03</span> <span class="meta-keyword">/usr/</span>libexec/amfid</div><div class="line"></div><div class="line"><span class="number">27</span> ?? <span class="number">0</span>:<span class="number">11.42</span> <span class="meta-keyword">/usr/</span>sbin/syslogd -bsd_out <span class="number">1</span></div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line"><span class="number">1006</span> ?? <span class="number">0</span>:<span class="number">00.34</span> /System/Library/Frameworks/UIKit.framework/Support/pasteboardd</div><div class="line"></div><div class="line"><span class="number">1102</span> ?? <span class="number">0</span>:<span class="number">02.93</span> <span class="meta-keyword">/var/</span>mobile/Containers/Bundle/Application/<span class="number">7E51</span>DAF5<span class="number">-3</span>FCF<span class="number">-42</span>CF-B4CB-F47CC4078048/easycost.app/easycost</div><div class="line"></div><div class="line"><span class="number">1219</span> ?? <span class="number">0</span>:<span class="number">00.00</span> (bash)</div><div class="line"></div><div class="line"><span class="number">1220</span> ?? <span class="number">0</span>:<span class="number">00.28</span> (gssc)</div><div class="line"></div><div class="line"><span class="number">770</span> ttys000 <span class="number">0</span>:<span class="number">00.06</span> -sh</div><div class="line"></div><div class="line"><span class="number">810</span> ttys000 <span class="number">0</span>:<span class="number">00.30</span> cycript</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="number">1221</span> ttys000 <span class="number">0</span>:<span class="number">00.01</span> ps -e</div></pre></td></tr></table></figure>
<p>因为iOS上只打开了一个AppStore中的app，所以唯一的那个含有<code>/var/mobile/Containers/Bundle/Application/</code>字样的结果就是目标可执行文件的全路径。</p>
<p><code>Cycript -p 1102</code></p>
<h4 id="1-1-2-class-dump获取-h头文件"><a href="#1-1-2-class-dump获取-h头文件" class="headerlink" title="1.1.2 class-dump获取.h头文件"></a>1.1.2 class-dump获取.h头文件</h4><ul>
<li>在砸壳后文件的目录下，我们执行<code>class-dump --arch armv7 -S -s -H 可执行文件 -o 自定义的文件夹路径</code>，获得砸壳后的头文件</li>
</ul>
<h4 id="1-1-3cycript打印视图层次"><a href="#1-1-3cycript打印视图层次" class="headerlink" title="1.1.3cycript打印视图层次"></a>1.1.3cycript打印视图层次</h4><blockquote>
<p>Cycript是由saurik推出的一款脚本语言，更多资详细资料可以查看它的官网<a href="http://www.cycript.org" target="_blank" rel="external">http://www.cycript.org</a> ,可以从MTerminal中执行Cycript，也可以ssh到ios设备中执行Cycript</p>
</blockquote>
<p>我们首先根据之前介绍的方法向目标app注入Cycript</p>
<p> <img src="" alt=""></p>
<p>紧接着我们找到这个付费功能具体实现的界面，也就是在“周期记账”选项所在的界面中，输入</p>
<p><code>UIApp.keyWindow.recursiveDescription().toString()</code>打印当前的视图层次</p>
<p><img src="http://oh5mz2415.bkt.clouddn.com/FCEB9BAB-CD0C-43D4-B426-D06C898173B3.png" alt="FCEB9BAB-CD0C-43D4-B426-D06C898173B3.png"></p>
<p><img src="http://oh5mz2415.bkt.clouddn.com/F9450BEC-1327-422A-ABB2-329261226707.png" alt="F9450BEC-1327-422A-ABB2-329261226707.png"></p>
<p>这里看到有好多东西，但是仔细一看，有一个KLSwitch,再看到前面“周期记账”的开关是一个UISwitch，于是我们先把注意力放在这个KLSwitch上面。</p>
<p>我们可以先根据这个KLSwitch，先找到他的controller，由于这里的switch是一个对象，而这个界面是一个view，所以我们可以通过nextResponder追溯到它的controller，然后再通过controller来响应这个switch，看看我们的猜想是否正确。</p>
<p>我们在class-dump中的头文件中搜索CatalogInfoViewController.h</p>
<p><img src="http://oh5mz2415.bkt.clouddn.com/9C4A794D-EA81-48A9-9CCC-B35A4732E574.png" alt="9C4A794D-EA81-48A9-9CCC-B35A4732E574.png"></p>
<p>找到这个cycleSwitch，猜想这个cycleSwitch应该比较特殊，可能是我们的目标，于是通过之前打印出来的controller来响应这个cycleSwitch，看看究竟会怎样</p>
<p><img src="http://oh5mz2415.bkt.clouddn.com/45C6EDA8-9524-40C6-AA3E-B30F13FF2595.png" alt="45C6EDA8-9524-40C6-AA3E-B30F13FF2595.png"></p>
<p>结果不出意料，在执行了<code>[#0x14d00820 cycleSwitch:YES]</code>之后，提醒购买的弹框弹了出来，这就初步确定了我们的目标函数</p>
<p>并且也确定了<code>CatalogInfoViewController</code>这个controller，在接下来的操作中我们将会用到</p>
<p><img src="http://oh5mz2415.bkt.clouddn.com/0968E158-257D-4297-9079-4E791557F421.png" alt="0968E158-257D-4297-9079-4E791557F421.png"></p>
<h4 id="1-1-4-debugserver-lldb动态调试确认关键函数"><a href="#1-1-4-debugserver-lldb动态调试确认关键函数" class="headerlink" title="1.1.4 debugserver+lldb动态调试确认关键函数"></a>1.1.4 debugserver+lldb动态调试确认关键函数</h4><p>接下来该我们该祭起debugserver和lldb了</p>
<blockquote>
<p>debugserver运行在iOS上，顾名思义，它作为服务端，实际执行LLDB（作为客户端）传过来的命令，再把执行结果反馈给LLDB，显示给用户，即所谓的“远程调试”。</p>
</blockquote>
<p><img src="http://oh5mz2415.bkt.clouddn.com/D107C0B6-4633-459D-8B45-9235708A3C43.png" alt="D107C0B6-4633-459D-8B45-9235708A3C43.png"></p>
<p><img src="http://oh5mz2415.bkt.clouddn.com/A5D1E3ED-594C-443C-B2B5-92CE6F6FF86D.png" alt="A5D1E3ED-594C-443C-B2B5-92CE6F6FF86D.png"></p>
<p>然后通过命令<code>image list -o -f</code> 查看它的ASLR偏移 </p>
<p><img src="http://oh5mz2415.bkt.clouddn.com/2B333515-BCE0-4FC8-90A8-669D05F9E078.png" alt="2B333515-BCE0-4FC8-90A8-669D05F9E078.png"></p>
<p>我们可以看出它的ASLR偏移为<code>0x0003c000</code></p>
<p>紧接着我们把之前砸壳的文件拖进hopper或ida，搜索前面得到的<code>CatalogInfoViewController</code> ，大致浏览一遍，可以看到有一个<code>[CatalogInfoViewController cycleSwitch]</code>这和我们之前的猜想不谋而合</p>
<p><img src="http://oh5mz2415.bkt.clouddn.com/33975B1D-E93E-4299-BC26-2A7CAB3E91C6.png" alt="33975B1D-E93E-4299-BC26-2A7CAB3E91C6.png"></p>
<p>这时候下面的一个<code>isPurchased</code> （购买）引起了我的注意，我想要看看这个isPurchased到底做了什么事情，究竟是不是我们猜想的那样，于是在函数开始时(0x0004fdf0)打断点,由于之前看到ASLR偏移为0x0003c000，所以要把他们相加才是函数偏移后的地址</p>
<p><img src="http://oh5mz2415.bkt.clouddn.com/ECAB072D-B5A4-49C6-AB59-BCA32DB944D0.png" alt="ECAB072D-B5A4-49C6-AB59-BCA32DB944D0.png"></p>
<p>进入到函数中后，一直使用<code>ni</code>命令，直到函数到这里 </p>
<p><img src="http://oh5mz2415.bkt.clouddn.com/A9D9E77F-064B-412F-AC02-0B51AB3C0FC2.png" alt="A9D9E77F-064B-412F-AC02-0B51AB3C0FC2.png"></p>
<p>打印r0,发现参数为nil，我们来尝试着把r0的值改为1，然后我们发现这时候就可以使用我们的所谓“周期记账”的高级功能了，当然这还没完，现在这里只是确定目标函数以及参数，接下来我们就开始最关键也最必不可少的一步，就是用theos来编写tweak </p>
<p><img src="http://oh5mz2415.bkt.clouddn.com/1506AF86-8E46-4436-9969-08F0A8432331.png" alt="1506AF86-8E46-4436-9969-08F0A8432331.png"></p>
<h3 id="1-2编写tweak"><a href="#1-2编写tweak" class="headerlink" title="1.2编写tweak"></a>1.2编写tweak</h3><p>我们首先在导出的头文件中查找isPurchased，找到Purchased.h文件</p>
<p><img src="http://oh5mz2415.bkt.clouddn.com/BBC752AF-F902-48FD-8911-290F35A0A589.png" alt="BBC752AF-F902-48FD-8911-290F35A0A589.png"></p>
<p><img src="http://oh5mz2415.bkt.clouddn.com/0294818F-275B-43E2-ABA8-D8CA789D0754.png" alt="0294818F-275B-43E2-ABA8-D8CA789D0754.png"></p>
<p>然后我们看到@property(nonatomic,getter=isPurchased,setter=setPurchased:) BOOL purchased,我们把这个purchased永久返回1，应该就可以完成我们的任务了。</p>
<p>继续，新建工程，编辑makefil</p>
<p><img src="http://oh5mz2415.bkt.clouddn.com/QQ20161118-1@2x.png" alt="QQ20161118-1@2x.png"></p>
<p>然后继续编辑tweak</p>
<p><img src="http://oh5mz2415.bkt.clouddn.com/QQ20161118-2@2x.png" alt="QQ20161118-2@2x.png"></p>
<p><img src="http://oh5mz2415.bkt.clouddn.com/QQ20161118-3@2x.png" alt="QQ20161118-3@2x.png"></p>
<p>打包编译安装到越狱手机，就可以看到我们可以使用所谓的高级功能了。</p>
<h3 id="2-0关于防护措施杂谈"><a href="#2-0关于防护措施杂谈" class="headerlink" title="2.0关于防护措施杂谈"></a>2.0关于防护措施杂谈</h3><p>俗话说得好，有攻就有防，ios安全防护措施虽说没有安卓这么多，但也有逐渐发展的趋势，小弟觉得首先一个原因可能是国内代码混淆技术没有普及，而且大多数app也只有核心功能才会被混淆，不然全文混淆的话运行过程中的内存加解密也是很大的开销。</p>
<p>关于防护措施，较为普遍的就是引入动态防护组件，个人觉得x维安全相对做的还不错，就目前来说绝大多数app连基本的反调试功能都没有，引入动态防护组件，可以一定程度上防止动态注入、动态调试，方法名类名混淆等，还有关于llvm的一些东西，如在IR层实现一些混淆逻辑，加入各种跳转各种无用逻辑但又不会影响原有的程序逻辑，具体可以参考<a href="https://github.com/obfuscator-llvm/obfuscator/" target="_blank" rel="external">https://github.com/obfuscator-llvm/obfuscator/</a>，不过挺久没维护了需要自己大动干戈折腾一番，对个人能力要求较高，而且IR层的混淆本身问题较多可能使app存在很多潜在的bug，并且在一定程度上可以被还原，所以只要能做到以上的一些，可以防止新手逆向，在一定程度上已经把很多人挡在了外面。ps：黑灰产朋友应该感谢微信没做防护措施。</p>
<p>除了这些当然还有其他方面的防护措施，随着计算机的发展安全也会越来越被重视，对ios逆向感兴趣推荐@大名狗剩的《ios应用逆向工程》以及论坛bbs.iosre.com，欢迎前来交流。</p>
<p><strong>小结</strong>：本文为这款记账软件制作了去除高级功能限制插件，让我们可以更全面的使用这款app，虽然最后的代码只有几行，但整个分析过程却是一环扣一环，哪怕其中一环出错不注意就会被误导，逆向这款app虽然说挺简单的，但主要思路差不多都是这样，希望能为正在学习并且自己对心仪的app无从下手的朋友提供一些帮助。</p>
<p>有些朋友觉得本文运气成分很大，没错，逆向工程不比app开发，没有官方文档作为参考，最有效的方式就是不断尝试，不断犯错，再不断改进，我们面对的总是一些未知的东西，或许你离成功只差一步，但却因为看不到前方，而走向一条更困难的路，我们在计算机的行业里只有不断探索，才有可能逐渐超越自我，小弟也是初学逆向，对自己说也对路上的朋友说，愿我们在探索的道路上一直勇敢下去。</p>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[OSX内核调试]]></title>
      <url>http://Hello-Sherlock.github.io/2016/12/15/four-Blog/</url>
      <content type="html"><![CDATA[<h2 id="搭建OSX调试环境"><a href="#搭建OSX调试环境" class="headerlink" title="搭建OSX调试环境"></a>搭建OSX调试环境</h2><ol>
<li>VMware8.5.1</li>
<li>Kernel_Debug_Kit10.11.4build_15E65</li>
<li>Install El Capitan 10.11.4 (15E65)</li>
</ol>
<a id="more"></a>
<p>这里现在Mac上安装VM，在装虚拟机的过程中遇到了个坑，因为是8.x的VM，所以运行OSX系统时会出现<code>与vmmon模块的版本不匹配，需要308.0，现有304.0</code> ，网上找了很多方法也没办法解决，最后重启了一遍电脑竟然可以了。</p>
<p>紧接着就是在本机和虚拟机中安装KDK</p>
<blockquote>
<p><strong>Kernel Debug Kit是苹果官方提供的调试工具包,每一个正式的系统中都会有对应的KDK,下载地址在<a href="https://developer.apple.com/downloads/" target="_blank" rel="external">这里</a></strong></p>
</blockquote>
<p>下载了对应版本的kdk后，在虚拟机中和本机中都要安装这个KDK，安装后的目录在<code>/Library/Developer/KDKs/Kernel_Debug_Kit_10.11.4_build_15E65</code>中</p>
<p>在OSX中，内核的可执行文件位于<code>/Systems/Library/Kernels</code>下，所以我们只需要在KDK安装目录的可执行文件下找到<code>kernel.development</code>可执行文件，复制到<code>/Systems/Library/Kernels</code> 即可，但是OSX使用了 <strong>“rootless”</strong> 的机制，所以我们可能无法复制，这时我们需要关闭系统完整性保护机制，如何做呢？我们首先要在虚拟机中重启，然后立即按住<code>option+command+R</code>，直到出现🌐地球，然后我们顶部找到终端，打开后输入<code>csrutil disable</code>，即可关闭，然后再重启，就可以复制了。</p>
<p>复制后我们要设置系统调试参数:</p>
<p><code>sudo nvram boot-args=&quot;debug=0x141 kext-dev-mode=1 kcsuffix=development pmuflags=1 -v&quot;</code></p>
<p>关于这些参数</p>
<ol>
<li><code>debug=0x141</code>启用了远程调试模式</li>
<li><code>kext-dev-mode=1</code>可以用来加载未签名的kext文件（kext文件：Mac OSX的内核扩展，通常用于设备驱动程序）</li>
<li><code>kcsuffix=development</code>我们之前复制的是kernel.development文件，这里允许我们根据这个文件进行引导内核发展</li>
<li><code>pmuflags=1</code>禁止看门狗定时器</li>
<li><code>-v</code> 内核调试的时候会有一些有用的信息</li>
</ol>
<p>这时我们就要看看虚拟机网络配置以至于接下来远程连接到它</p>
<p><img src="http://oh5mz2415.bkt.clouddn.com/B5C02EBEC1AE2212BD1996E2FFE4F98C.jpg" alt="B5C02EBEC1AE2212BD1996E2FFE4F98C"></p>
<p>这里Mac地址<code>00:0c:29:1b:7d:f0</code> 和IP地址<code>192.168.174.129</code>是要记住的</p>
<p>由于我们要进行新的内核调试，所以我们要设置kext缓存为无效</p>
<p><code>sudo kextcache -invalidate</code></p>
<h2 id="进行内核调试"><a href="#进行内核调试" class="headerlink" title="进行内核调试"></a>进行内核调试</h2><p>我们首先在虚拟机上启动lldb</p>
<p>然后创建内核调试任务</p>
<p><code>target create /Library/Developer/KDKs/KDK_10.11.4_15E65.kdk/System/Library/Kernels/kernel.development</code></p>
<p><img src="http://oh5mz2415.bkt.clouddn.com/09ED67D25ECEA5C31E9BA548ECBE74EE.jpg" alt="09ED67D25ECEA5C31E9BA548ECBE74EE"></p>
<p>然后我们重启虚拟机，等开机会就会看到提示远程连接的信息</p>
<p><img src="http://oh5mz2415.bkt.clouddn.com/QQ20161215-3@2x.jpg" alt="QQ20161215-3@2x"></p>
<p>这时候我们就开始在主机上远程连接了，还记得之前我们要记住的mac地址和ip地址吗？</p>
<p>我们在主机上启动lldb</p>
<p><code>kdp-remote 192.168.174.129</code></p>
<p>lldb控制台会输出一些信息并且在虚拟机中也会出现<code>Connected to remote debugger</code>，这样就远程连接到了虚拟机</p>
<p><img src="http://oh5mz2415.bkt.clouddn.com/QQ20161215-5@2x.jpg" alt="QQ20161215-5@2x"><br><img src="http://oh5mz2415.bkt.clouddn.com/QQ20161215-6@2x.jpg" alt="QQ20161215-6@2x"></p>
<p>到这里，基本上完成了内核调试的基础步骤，然后就进行和平时通过lldb一样的操作了，这里不再赘述，大家可以下来自己按照意愿来调试。</p>
<blockquote>
<p><strong>参考：<a href="http://ddeville.me/2015/08/kernel-debugging-with-lldb-and-vmware-fusion" target="_blank" rel="external">http://ddeville.me/2015/08/kernel-debugging-with-lldb-and-vmware-fusion</a></strong></p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> OSX </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mach-O文件格式]]></title>
      <url>http://Hello-Sherlock.github.io/2016/12/06/three-Blog/</url>
      <content type="html"><![CDATA[<p>众所周知，我们用Xcode构建一个程序过程中，会把源文件转换成一个可执行文件，这个可执行文件中包含的字节码会被CPU执行。<br>就像Windows上的PE和Linux上的ELF，OS X系统可执行文件的格式为Mach-O，接下来简单谈谈Mach-O。</p>
<p>先来看看苹果官方文档对Mach-O结构组成的描述<br><a id="more"></a></p>
<p><img src="http://oh5mz2415.bkt.clouddn.com/794D3F35-0A43-45E0-9EA4-CA2637954096.png" alt="794D3F35-0A43-45E0-9EA4-CA2637954096"></p>
<p>由图可知，Mach-O主要分为3大部分：<br>1.Header:用于快速确认一些关于当前文件对应的处理器，文件类型，Load connamd个数基本信息<br>2.Load commands:紧跟在Header之后，用于告诉加载器怎样处理二进制数据<br>3.Data:包含Segment中的具体信息</p>
<h3 id="Headers"><a href="#Headers" class="headerlink" title="Headers"></a>Headers</h3><p>headers的定义在开源内核代码中可以找到(/usr/include/mach-o/loader.h)</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> mach_header &#123;</div><div class="line"><span class="keyword">uint32_t</span> magic; <span class="comment">/* mach magic number identifier */</span></div><div class="line"><span class="keyword">cpu_type_t</span> cputype; <span class="comment">/* cpu specifier */</span></div><div class="line"><span class="keyword">cpu_subtype_t</span> cpusubtype; <span class="comment">/* machine specifier */</span></div><div class="line"><span class="keyword">uint32_t</span> filetype; <span class="comment">/* type of file */</span></div><div class="line"><span class="keyword">uint32_t</span> ncmds; <span class="comment">/* number of load commands */</span></div><div class="line"><span class="keyword">uint32_t</span> sizeofcmds; <span class="comment">/* the size of all the load commands */</span></div><div class="line"><span class="keyword">uint32_t</span> flags; <span class="comment">/* flags */</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">/* Constant for the magic field of the mach_header (32-bit architectures) */</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MH_MAGIC 0xfeedface <span class="comment">/* the mach magic number */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MH_CIGAM 0xcefaedfe <span class="comment">/* NXSwapInt(MH_MAGIC) */</span></span></div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> * The 64-bit mach header appears at the very beginning of object files for</div><div class="line"> * 64-bit architectures.</div><div class="line"> */</div><div class="line"><span class="keyword">struct</span> mach_header_64 &#123;</div><div class="line"><span class="keyword">uint32_t</span> magic; <span class="comment">/* mach magic number identifier */</span></div><div class="line"><span class="keyword">cpu_type_t</span> cputype; <span class="comment">/* cpu specifier */</span></div><div class="line"><span class="keyword">cpu_subtype_t</span> cpusubtype; <span class="comment">/* machine specifier */</span></div><div class="line"><span class="keyword">uint32_t</span> filetype; <span class="comment">/* type of file */</span></div><div class="line"><span class="keyword">uint32_t</span> ncmds; <span class="comment">/* number of load commands */</span></div><div class="line"><span class="keyword">uint32_t</span> sizeofcmds; <span class="comment">/* the size of all the load commands */</span></div><div class="line"><span class="keyword">uint32_t</span> flags; <span class="comment">/* flags */</span></div><div class="line"><span class="keyword">uint32_t</span> reserved; <span class="comment">/* reserved */</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">/* Constant for the magic field of the mach_header_64 (64-bit architectures) */</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MH_MAGIC_64 0xfeedfacf <span class="comment">/* the 64-bit mach magic number */</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MH_CIGAM_64 0xcffaedfe <span class="comment">/* NXSwapInt(MH_MAGIC_64) */</span></span></div><div class="line"></div><div class="line"><span class="comment">/*</span></div></pre></td></tr></table></figure>
<p>根据mach_header和mach_header_64的定义，可以很明显的看出Headers的主要作用就是迅速确认当前文件的文件类型运行环境等。</p>
<p>这里找个例子，首先创建一个helloworld.c文件，</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Hello World!\n"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>保存后在终端后再当前目录下输入代码<br>clang helloworld.c<br>如果我们没有指定名字的话，编译器会默认把helloworld.c文件编译成名为a.out的二进制文件</p>
<p>我们用MachOView打开这个二进制文件，来看看headers中的详细信息(这里可以通过<code>otool -l a.out</code>来查看，但看起来比较吃力)</p>
<p><img src="http://oh5mz2415.bkt.clouddn.com/4C4E0C28-68AB-4D4E-9B38-8A520350E25F.png" alt="4C4E0C28-68AB-4D4E-9B38-8A520350E25F"></p>
<ul>
<li>Magic：魔数，用于快速确认该文件用于64位还是32位，32位是0xfeedface,64位是0xfeedfacf</li>
<li>Cpu Type：CPU类型，</li>
<li>Cpusub Type：对应的具体类型，比如arm64、armv7</li>
<li>File Type：文件类型，比如可执行文件、库文件、Dsym文件，图中代表可执行文件,如例子中的MH_EXECUTE为可执行文件</li>
<li>MH_PIE:加载程序在随机的地址空间，只在MH_EXECUTE中使用</li>
<li>MH_TWOLEVEL:两级空间名称</li>
<li>MH_DYLDLINK:连接器linker</li>
<li>dyld：动态链接器，他是苹果开源的一个项目，可以在这里下载，当内核执行LC_DYLINK时，连接器会启动，查找进程所依赖的动态库，并加载到内存中。dyld是一个用户态进程，他不属于内核部分，而是作为一个单独的开源项目被苹果维护（但是属于Darwin部分）</li>
<li>随机地址空间ASLR：进程每一次启动，地址空间都会简单的随机化，否则，如果程序每一次启动的虚拟内存镜像都是一致的，容易被黑客采取重写内存的方式来破解。</li>
</ul>
<h3 id="Load-Commands"><a href="#Load-Commands" class="headerlink" title="Load Commands"></a>Load Commands</h3><figure class="highlight capnproto"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">load_command</span> </span>&#123;</div><div class="line">uint32_t cmd; /* type <span class="keyword">of</span> load command */</div><div class="line">uint32_t cmdsize; /* total size <span class="keyword">of</span> command <span class="keyword">in</span> bytes */</div></pre></td></tr></table></figure>
<p>Load Commands直接跟在headers后面，加载headers之后通过解析LoadCommands来加载接下来的数据，LC_SEGMENT_64和LC_SEGMENT是加载的主要命令，他们负责指导内核设置进程的内存空间</p>
<p><img src="http://oh5mz2415.bkt.clouddn.com/F784BC98-6C5A-4723-8CE9-77A3042481E7.png" alt="F784BC98-6C5A-4723-8CE9-77A3042481E7"></p>
<p>关于具体如何通过load_commands的cmd字段来加载mach-o 文件，有兴趣可以去/usr/include/mach-o 下面看看源码，这里只要知道根据cmd字段的类型不同，使用了不同的函数来加载，基本看语义都可以解决。</p>
<p>这里大概讲一下前面这些段分别代表的含义，_TEXT对应的就是代码段，_DATA对应的是可读或可写的数据，_LINKEDIT是支持dyld的，里面包含符号表等数据。</p>
<h3 id="Section"><a href="#Section" class="headerlink" title="Section"></a>Section</h3><p>一个可执行文件包含多个段，也就是多个 section。可执行文件不同的部分将加载进不同的section，并且不同的section会转换进不同的segment中。这个概念对于所有的可执行文件都是成立的。</p>
<blockquote>
<p>参考文章：<a href="https://objccn.io/issue-6-3/" target="_blank" rel="external">https://objccn.io/issue-6-3/</a> </p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> OSX </tag>
            
            <tag> Mach-O </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[通过Debugserver&lldb来调试一个被加了ptrace反调试的app]]></title>
      <url>http://Hello-Sherlock.github.io/2016/12/01/two-Blog/</url>
      <content type="html"><![CDATA[<blockquote>
<p>关于ptrace,ptrace是一个系统函数，它提供了一种可以使父进程监控其他进程的方式，还可以改变<br>子进程中的寄存器和内核印象，因而可以实现断点调试和系统调用的跟踪。<br>使用ptrace，可以在用户层拦截和修改系统调用。</p>
</blockquote>
<a id="more"></a>
<p>那么我们来到官网看看他是怎么讲的<a href="http://iphonedevwiki.net/index.php/Debugserver" target="_blank" rel="external">http://iphonedevwiki.net/index.php/Debugserver</a><br>官网一张图表达得很清楚<br><img src="http://oh5mz2415.bkt.clouddn.com/one" alt="one"></p>
<p>我们这里首先使用debugserver正常附加，来判断目标app究竟有没有使用ptrace来反调试<br><figure class="highlight subunit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">linguochengde-iPhone:~ root# debugserver *:1234 -a AMapiPhone</div><div class="line">debugserver-@(#)PROGRAM:debugserver  PROJECT:debugserver<span class="string">-320</span>.2.89</div><div class="line"> for armv7.</div><div class="line">Attaching to process AMapiPhone...</div><div class="line"><span class="keyword">error: </span>failed to attach to process named: ""</div><div class="line">Exiting.</div></pre></td></tr></table></figure></p>
<p>可以看到这里debugserver附加失败，再根据目前公开的反调试的方法只有通过ptrace系统函数来反调试，于是了解了ptrace后基本上也就很好绕过了</p>
<p>首先通过lldb来启动app<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">linguochengde-iPhone:~ root# debugserver -x posix *:<span class="number">1234</span> <span class="regexp">/var/m</span>obile<span class="regexp">/Containers/</span>Bundle<span class="regexp">/Application/</span><span class="number">9</span>F0A5D73-<span class="number">7589</span>-<span class="number">4</span>BE5-A209-A96002B6D641<span class="regexp">/AMapiPhone.app/</span>AMapiPhone</div><div class="line">debugserver-@(#)PROGRAM:debugserver  <span class="keyword">PROJECT</span>:debugserver-<span class="number">320.2</span>.<span class="number">89</span></div><div class="line"> <span class="keyword">for</span> armv7.</div><div class="line">Listening to port <span class="number">1234</span> <span class="keyword">for</span> a connection <span class="keyword">from</span> *...</div></pre></td></tr></table></figure></p>
<p>这里之前参考<a href="http://bbs.iosre.com/t/7-2-0-ios/770中的backboard参数，发现失败，于是把参数换成posix后debugserver可以正常附加" target="_blank" rel="external">http://bbs.iosre.com/t/7-2-0-ios/770中的backboard参数，发现失败，于是把参数换成posix后debugserver可以正常附加</a></p>
<p>然后就按照网上很多方法，启动lldb后，先通过在ptrace上下断点，找到ptrace偏移后的地址，再通过image list -o -f找到ASLR偏移，相减算出ptrace的正确位置后在ida或者hopper中打开，进一步分析</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">┌─(~)─────────────────────────(linguocheng<span class="comment">@Sherlock-HolmesdeMacBook-Pro:s002)─┐</span></div><div class="line">└─(<span class="number">09</span>:<span class="number">27</span>:<span class="number">13</span>)──&gt; lldb                                              ──(三,<span class="number">1130</span>)─┘</div><div class="line">(lldb)  process connect connect://<span class="number">192</span>.<span class="number">168</span>.<span class="number">1</span>.<span class="number">102</span>:<span class="number">1234</span></div><div class="line"><span class="symbol">Process</span> <span class="number">59223</span> stopped</div><div class="line">* thread <span class="number">#1</span>: tid = <span class="number">0x3240a</span>, <span class="number">0x1fe4d000</span> dyld`_dyld_start, stop reason = signal SIGSTOP</div><div class="line">    frame <span class="number">#0</span>: <span class="number">0x1fe4d000</span> dyld`_dyld_start</div><div class="line"><span class="symbol">dyld</span>`_dyld_start:</div><div class="line">-&gt;  <span class="number">0x1fe4d000</span> &lt;+<span class="number">0</span>&gt;:  <span class="keyword">mov </span>   <span class="built_in">r8</span>, <span class="built_in">sp</span></div><div class="line">    <span class="number">0x1fe4d004</span> &lt;+<span class="number">4</span>&gt;:  <span class="keyword">sub </span>   <span class="built_in">sp</span>, <span class="built_in">sp</span>, <span class="number">#16</span></div><div class="line">    <span class="number">0x1fe4d008</span> &lt;+<span class="number">8</span>&gt;:  <span class="keyword">bic </span>   <span class="built_in">sp</span>, <span class="built_in">sp</span>, <span class="number">#7</span></div><div class="line">    <span class="number">0x1fe4d00c</span> &lt;+<span class="number">12</span>&gt;: <span class="keyword">ldr </span>   <span class="built_in">r3</span>, [<span class="built_in">pc</span>, <span class="number">#0x70</span>]           <span class="comment">; &lt;+132&gt;</span></div><div class="line">(lldb) <span class="keyword">b </span>ptrace</div><div class="line"><span class="keyword">Breakpoint </span><span class="number">1</span>: no locations (pending).</div><div class="line"><span class="symbol">WARNING</span>:  Unable to resolve <span class="keyword">breakpoint </span>to any actual locations.</div><div class="line">(lldb) c</div><div class="line"><span class="symbol">Process</span> <span class="number">59223</span> resuming</div><div class="line"><span class="number">1</span> location <span class="keyword">added </span>to <span class="keyword">breakpoint </span><span class="number">1</span></div><div class="line"><span class="number">2016</span>-<span class="number">11</span>-<span class="number">30</span> <span class="number">09</span>:<span class="number">27</span>:<span class="number">57</span>.<span class="number">361</span> AMapiPhone[<span class="number">59223</span>:<span class="number">205834</span>] Foundation called mkdir(<span class="string">"/tmp/(A Document Being Saved By 高德地图)"</span>), <span class="keyword">it </span>didn<span class="string">'t return 0, and errno was set to 1.</span></div><div class="line">2016-11-30 09:27:57.378 AMapiPhone[59223:205834] Foundation called mkdir("/tmp/(A Document Being Saved By 高德地图)"), it didn't return <span class="number">0</span>, <span class="keyword">and </span>errno was set to <span class="number">1</span>.</div><div class="line"><span class="symbol">Process</span> <span class="number">59223</span> stopped</div><div class="line">* thread <span class="number">#1</span>: tid = <span class="number">0x3240a</span>, <span class="number">0x364b0e58</span> libsystem_kernel.dylib`__ptrace, queue = <span class="string">'com.apple.main-thread'</span>, stop reason = <span class="keyword">breakpoint </span><span class="number">1</span>.<span class="number">1</span></div><div class="line">    frame <span class="number">#0</span>: <span class="number">0x364b0e58</span> libsystem_kernel.dylib`__ptrace</div><div class="line"><span class="symbol">libsystem_kernel.dylib</span>`__ptrace:</div><div class="line">-&gt;  <span class="number">0x364b0e58</span> &lt;+<span class="number">0</span>&gt;:  <span class="keyword">ldr </span>   <span class="built_in">r12</span>, [<span class="built_in">pc</span>, <span class="number">#0x4</span>]           <span class="comment">; &lt;+12&gt;</span></div><div class="line">    <span class="number">0x364b0e5c</span> &lt;+<span class="number">4</span>&gt;:  <span class="keyword">ldr </span>   <span class="built_in">r12</span>, [<span class="built_in">pc</span>, <span class="built_in">r12</span>]</div><div class="line">    <span class="number">0x364b0e60</span> &lt;+<span class="number">8</span>&gt;:  <span class="keyword">b </span>     <span class="number">0x364b0e68</span>                <span class="comment">; &lt;+16&gt;</span></div><div class="line">    <span class="number">0x364b0e64</span> &lt;+<span class="number">12</span>&gt;: <span class="keyword">addeq </span> <span class="built_in">r9</span>, <span class="built_in">r6</span>, <span class="number">#204</span>, <span class="number">#2</span></div><div class="line">(lldb) p/x $<span class="built_in">lr</span></div><div class="line">(unsigned int) <span class="number">$0</span> = <span class="number">0x0004515d</span></div><div class="line">(lldb) image list -o -f</div><div class="line">[  <span class="number">0</span>] <span class="number">0x0002f000</span> /private/var/mobile/Containers/<span class="keyword">Bundle/Application/9F0A5D73-7589-4BE5-A209-A96002B6D641/AMapiPhone.app/AMapiPhone(0x0000000000033000)</span></div></pre></td></tr></table></figure>
<p><img src="http://oh5mz2415.bkt.clouddn.com/two" alt="two"></p>
<p>可以看到和之前文章中不一样，这个是在start中加入了ptrace系统函数，我们分析当ptrace第一个参为31时，会detach调试器。所以，newptrace中可以直接返回0，也可以判断第一个参数等于31时，更改参数的返回值</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;substrate.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;mach-o/dyld.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;dlfcn.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="title">int</span> <span class="params">(*oldptrace)</span><span class="params">(<span class="keyword">int</span> request, <span class="keyword">pid_t</span> pid, <span class="keyword">caddr_t</span> addr, <span class="keyword">int</span> data)</span></span>;</div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">newptrace</span><span class="params">(<span class="keyword">int</span> request, <span class="keyword">pid_t</span> pid, <span class="keyword">caddr_t</span> addr, <span class="keyword">int</span> data)</span></span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">&#125;</div><div class="line">%ctor &#123;</div><div class="line"></div><div class="line">        MSHookFunction((<span class="keyword">void</span> *)MSFindSymbol(<span class="literal">NULL</span>,<span class="string">"_ptrace"</span>), (<span class="keyword">void</span> *)newptrace, (<span class="keyword">void</span> **)&amp;oldptrace);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>OK，有了tweak加持就可以动态调试了</p>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">linguocheng <span class="keyword">in</span> ~ λ ssh root@<span class="number">192.168</span>.<span class="number">1.102</span></div><div class="line">root@<span class="number">192.168</span>.<span class="number">1.102</span>'s password:</div><div class="line">linguochengde-iPhone:~ root<span class="comment"># debugserver *:1234 -a AMapiPhone</span></div><div class="line">debugserver-@(<span class="comment">#)PROGRAM:debugserver  PROJECT:debugserver-320.2.89</span></div><div class="line"> <span class="keyword">for</span> armv7.</div><div class="line">Attaching <span class="keyword">to</span> process AMapiPhone...</div><div class="line">Listening <span class="keyword">to</span> <span class="keyword">port</span> <span class="number">1234</span> <span class="keyword">for</span> a connection <span class="keyword">from</span> *...</div></pre></td></tr></table></figure>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">┌─(~)─────────────────────────(linguocheng<span class="comment">@Sherlock-HolmesdeMacBook-Pro:s002)─┐</span></div><div class="line">└─(<span class="number">11</span>:<span class="number">27</span>:<span class="number">21</span>)──&gt; lldb                                        <span class="number">146</span> ↵ ──(四,<span class="number">120</span></div><div class="line">(lldb) process connect connect://<span class="number">192</span>.<span class="number">168</span>.<span class="number">1</span>.<span class="number">102</span>:<span class="number">1234</span></div><div class="line"><span class="symbol">Process</span> <span class="number">1996</span> stopped</div><div class="line">* thread <span class="number">#1</span>: tid = <span class="number">0x21a2</span>, <span class="number">0x322a549c</span> libsystem_kernel.dylib`mach_msg_trap + <span class="number">20</span>, name = <span class="string">'RouMainThread'</span>, queue = <span class="string">'com.apple.main-thread'</span>, stop reason = signal SIGSTOP</div><div class="line">    frame <span class="number">#0</span>: <span class="number">0x322a549c</span> libsystem_kernel.dylib`mach_msg_trap + <span class="number">20</span></div><div class="line"><span class="symbol">libsystem_kernel.dylib</span>`mach_msg_trap:</div><div class="line">-&gt;  <span class="number">0x322a549c</span> &lt;+<span class="number">20</span>&gt;: <span class="keyword">pop </span>   &#123;<span class="built_in">r4</span>, <span class="built_in">r5</span>, <span class="built_in">r6</span>, <span class="built_in">r8</span>&#125;</div><div class="line">    <span class="number">0x322a54a0</span> &lt;+<span class="number">24</span>&gt;: <span class="keyword">bx </span>    <span class="built_in">lr</span></div><div class="line"></div><div class="line"><span class="symbol">libsystem_kernel.dylib</span>`mach_msg_overwrite_trap:</div><div class="line">    <span class="number">0x322a54a4</span> &lt;+<span class="number">0</span>&gt;:  <span class="keyword">mov </span>   <span class="built_in">r12</span>, <span class="built_in">sp</span></div><div class="line">    <span class="number">0x322a54a8</span> &lt;+<span class="number">4</span>&gt;:  <span class="keyword">push </span>  &#123;<span class="built_in">r4</span>, <span class="built_in">r5</span>, <span class="built_in">r6</span>, <span class="built_in">r8</span>&#125;</div><div class="line">(lldb)</div></pre></td></tr></table></figure>
<p>参考:<a href="http://bbs.iosre.com/t/7-2-0-ios/770" target="_blank" rel="external">http://bbs.iosre.com/t/7-2-0-ios/770</a><br>    <a href="http://www.linuxjournal.com/article/6100?page=0,1" target="_blank" rel="external">http://www.linuxjournal.com/article/6100?page=0,1</a></p>
]]></content>
      
        
        <tags>
            
            <tag> tools </tag>
            
            <tag> ptrace </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Introspy对iOS应用黑盒测试]]></title>
      <url>http://Hello-Sherlock.github.io/2016/11/24/one-Blog/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<ul>
<li><p>首先要在越狱手机上安装Introspy这个工具（这里的环境是 iPhone<br>4s，8.3），由于笔者电脑安装了 oh-my-zsh，导致wget出错，而暂时没找到解决方法，于是网上的那些方法对笔者来说都不适用，相信很多安装了oh-my-zsh的朋友也有这个困惑，想要zsh的炫酷但由<br>于配置文件路径等问题造成很多困惑，笔者Google了好多方法折腾了挺久也没找到尽人意的方法，机缘巧合在威锋上找到 <a href="http://apt.so/5877507，" target="_blank" rel="external">http://apt.so/5877507，</a> 添加然后找到Introspy，安装。</p>
</li>
<li><p>重启后打开，进入设置，就可以看到了。</p>
</li>
</ul>
<p><img src="http://oh5mz2415.bkt.clouddn.com/B9057178-D1F7-4E24-A29E-1B81452D9140.png" alt="B9057178-D1F7-4E24-A29E-1B81452D9140"></p>
<ul>
<li>打开设置功能<br>Introspy-app 用来选择你要跟踪的app<br>Introspy-setting 常规跟踪设置选项，默认全部开启</li>
</ul>
<p><img src="http://oh5mz2415.bkt.clouddn.com/QQ20161031-2@2x.png" alt="QQ20161031-2@2x"></p>
<ul>
<li>如果这是你的app在后台运行，你要先kill进程，然后重新打开，你的app，连接Xcode，<br>在window-device中就可以查看输出日志了</li>
</ul>
<p><img src="http://oh5mz2415.bkt.clouddn.com/QQ20161031-10@2x.png" alt="QQ20161031-10@2x"></p>
<ul>
<li>追踪信息被保存为一个数据库<code>introspy-xxxx.db</code>,存放在<code>./private/var/mobile/Applications/xxxxx/Library/introspy-com.xxxxx.db</code>中，但实际上PP助手中也能找到</li>
</ul>
<p><img src="http://oh5mz2415.bkt.clouddn.com/QQ20161031-3@2x.png" alt="QQ20161031-3@2x"><br><img src="http://oh5mz2415.bkt.clouddn.com/QQ20161031-4@2x.png" alt="QQ20161031-3@2x"></p>
<ul>
<li>然后打开<br><a href="https://github.com/iSECPartners/Introspy-Analyzer" target="_blank" rel="external">https://github.com/iSECPartners/Introspy-Analyzer</a><br>安装之后，你要把找到的数据库文件导出到这个Introspy-Analyzer-master文件夹里，然后cd到这个文件夹</li>
</ul>
<p><img src="http://oh5mz2415.bkt.clouddn.com/F5190147-5504-4854-9FE6-6CDB3DA5066F.png" alt="F5190147-5504-4854-9FE6-6CDB3DA5066F"><br>输入<code>python -m introspy -p ios -o 123 introspy-com.fenbi.tutor.db</code></p>
<blockquote>
<p>注意:<br>   这里是-o不是-i<br>   这里的123是你自己设置的存放生成运行时信息的文件夹</p>
</blockquote>
<p>这样一来，就会在当前文件夹下面生成一个名为123的文件夹，打开可以看到在本地文件将该数据库解析成 report.html</p>
<p><img src="http://oh5mz2415.bkt.clouddn.com/QQ20161031-5@2x.png" alt="QQ20161031-5@2x"></p>
<ul>
<li>打开report.html<br>我们也可以看到其中有一列叫做”Potential Findings”。这些都是Introspy认为存在漏洞的地方。在这里，我们将看看存储数据不安全的问题。 这可能不算是一个漏洞，因为保存的信息不一定非常重要。</li>
</ul>
<p><img src="http://oh5mz2415.bkt.clouddn.com/521C8D37-A4F2-4A29-96EF-A025C0717B6C.png" alt="521C8D37-A4F2-4A29-96EF-A025C0717B6C"></p>
<ul>
<li>也可以通过如下这些信息可以找到某app的全部接口信息等</li>
</ul>
<p><img src="http://oh5mz2415.bkt.clouddn.com/QQ20161031-8@2x.png" alt="QQ20161031-8@2x"><br><img src="http://oh5mz2415.bkt.clouddn.com/QQ20161031-9@2x.png" alt="QQ20161031-9@2x"></p>
<ul>
<li>你也可以在’Traced Calls’-‘DataStorage’中选择只查看Keychain中的信息</li>
</ul>
<p><img src="http://oh5mz2415.bkt.clouddn.com/QQ20161031-6@2x.png" alt="QQ20161031-6@2x"></p>
<blockquote>
<p>当然还可以通过命令行等对保存的参数进行分析，但笔者个人认为有以上分析足够了。<br>对ios逆向有兴趣的朋友推荐狗神的【ios应用逆向工程】以及<a href="http://bbs.iosre.com" target="_blank" rel="external">http://bbs.iosre.com</a></p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> tools </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[第一篇博客]]></title>
      <url>http://Hello-Sherlock.github.io/2016/11/24/hello-world/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<p>既然做出了选择，最好还是假定自己是对的，焦虑未来和后悔过去，只经历一个就够了<br>如果要说选择，大一的iOS开发，之后跟着@ko0zhi挖洞，又之后进入逆向的圈子，希望我们面对未知一直保留那种勇于探索的精神，愿，不忘初心。</p>
]]></content>
      
        
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
